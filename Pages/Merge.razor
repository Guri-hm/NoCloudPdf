@page "/merge"
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.IO

<PageTitle>Merge</PageTitle>

@if (isFilesLoaded && !showMergedResult)
{
    <!-- 上部固定バー（編集モード） -->
    <div class="fixed top-0 left-0 w-full bg-gray-800 text-white shadow-md z-50">
        <div class="flex items-center justify-between px-4 py-2">
            <span class="text-lg font-semibold">PDF操作</span>
            <div class="flex gap-2 items-center">
                <!-- 表示切り替えスイッチ -->
                <div class="flex items-center gap-2 mr-4">
                    <span class="text-sm">表示:</span>
                    <button class="@(isPageView ? "bg-gray-600" : "bg-blue-500") hover:bg-blue-600 text-white py-1 px-3 rounded text-sm"
                        @onclick="() => SwitchView(false)">
                        ファイル単位
                    </button>
                    <button class="@(isPageView ? "bg-blue-500" : "bg-gray-600") hover:bg-blue-600 text-white py-1 px-3 rounded text-sm"
                        @onclick="() => SwitchView(true)">
                        ページ単位
                    </button>
                </div>
                <!-- テスト用並び替えボタン -->
                <button class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded"
                    @onclick="TestSwapFirstTwo">
                    テスト：1↔2
                </button>
                <button class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded" @onclick="MergePDFs">
                    結合
                </button>
            </div>
        </div>
    </div>

    <!-- サムネイル編集エリア -->
    <div class="pt-16"> <!-- 上部バーの高さ分余白 -->
        <div id="sortable-container" class="flex flex-wrap gap-4 p-6">
            @if (pageThumbnails != null && pageThumbnails.Any())
            {
                @* 各サムネイルの左側に＋ボタンを配置（並び替え対象） *@
                @for (int i = 0; i < pageThumbnails.Count; i++)
                {
                    var index = i;

                    <div class="sortable-item-container flex items-center gap-2" data-index="@i">
                        @* 左側の＋ボタン *@
                        <div class="flex items-center relative insert-button-container" data-position="@i">
                            <button
                                class="w-8 h-8 bg-blue-500 hover:bg-blue-600 text-white rounded-full flex items-center justify-center text-lg font-bold shadow-md insert-button"
                                data-position="@i"
                                @onclick="@((e) => HandleInsertButtonClick(i, e))">
                                +
                            </button>
                        </div>

                        @* 右側のサムネイル *@
                        <div class="thumbnail-item relative group thumbnail-container">
                            @{
                                var isMultiPage = false;
                                var pageCount = 1;
                                var isPageLoading = false;
                                var hasPageError = false;
                                var displayInfo = GetItemDisplayInfo(index);
                                
                                // ファイル単位表示の場合、複数ページかチェック
                                if (!isPageView && index < pdfFiles.Count)
                                {
                                    var file = pdfFiles[index];
                                    isMultiPage = file.PageCount > 1;
                                    pageCount = file.PageCount;
                                }
                                // ページ単位表示の場合、ローディング状態をチェック
                                else if (isPageView && index < pageItems.Count)
                                {
                                    var pageItem = pageItems[index];
                                    isPageLoading = pageItem.IsLoading;
                                    hasPageError = pageItem.HasError;
                                }
                            }
                            
                            <!-- サムネイル画像部分 -->
                            <div class="@(isMultiPage ? "thumbnail-stack" : "")">
                                <div class="w-24 h-32 flex items-center justify-center overflow-hidden @(isMultiPage ? "stack-layer" : "")">
                                    @if (isPageLoading)
                                    {
                                        <div class="page-loading w-full h-full"></div>
                                    }
                                    else if (hasPageError)
                                    {
                                        <div class="page-error w-full h-full">
                                            読み込み<br/>エラー
                                        </div>
                                    }
                                    else
                                    {
                                        <img src="@pageThumbnails[i]" class="max-w-full max-h-full object-contain border border-gray-300 @(isPageView ? "thumbnail-loaded" : "")"
                                            draggable="false" />
                                    }
                                </div>
                                    
                                @if (isMultiPage)
                                {
                                    <div class="page-count-badge">
                                        @pageCount
                                    </div>
                                }
                            </div>
                            
                            <!-- ファイル情報表示 -->
                            <div class="file-info">
                                <div class="file-name" title="@displayInfo.fileName">
                                    @displayInfo.displayFileName
                                </div>
                                @if (isPageView && displayInfo.pageNumber > 0)
                                {
                                    <div class="page-number">
                                        p.@displayInfo.pageNumber
                                    </div>
                                }
                            </div>

                            <!-- サブメニュー -->
                            <div class="menu-overlay absolute top-2 right-2 bg-white shadow-md rounded p-1 flex-col"
                                style="display: none; z-index: 20;">
                                <button class="text-red-500 hover:text-red-700 p-1" @onclick="() => RemovePage(index)">
                                    <i class="fas fa-trash"></i>
                                </button>
                                <button class="text-blue-500 hover:text-blue-700 p-1 mt-1" @onclick="() => RotatePage(index)">
                                    <i class="fa-solid fa-rotate-right"></i>
                                </button>
                                @if (isMultiPage)
                                {
                                    <button class="text-green-500 hover:text-green-700 p-1 mt-1" @onclick="() => ExpandFile(index)" 
                                            title="全ページを展開">
                                        <i class="fa-solid fa-expand"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }

                @* 最後尾の固定＋ボタン *@
                <div class="non-sortable flex items-center relative insert-button-container" data-position="@pageThumbnails.Count">
                    <button
                        class="w-8 h-8 bg-blue-500 hover:bg-blue-600 text-white rounded-full flex items-center justify-center text-lg font-bold shadow-md insert-button"
                        data-position="@pageThumbnails.Count"
                        @onclick="@((e) => HandleInsertButtonClick(pageThumbnails.Count, e))">
                        +
                    </button>
                </div>
            }
            else
            {
                @* サムネイルが0個の場合は最初の＋ボタンのみ *@
                <div class="flex items-center relative insert-button-container" data-position="0">
                    <button
                        class="w-8 h-8 bg-blue-500 hover:bg-blue-600 text-white rounded-full flex items-center justify-center text-lg font-bold shadow-md insert-button"
                        data-position="0"
                        @onclick="@((e) => HandleInsertButtonClick(0, e))">
                        +
                    </button>
                </div>
            }
        </div>
    </div>
}

@* 結合結果表示画面 *@
@if (showMergedResult && !string.IsNullOrEmpty(mergedPdfUrl))
{
    <!-- 上部固定バー（結果表示モード） -->
    <div class="fixed top-0 left-0 w-full bg-gray-800 text-white shadow-md z-50">
        <div class="flex items-center justify-between px-4 py-2">
            <button class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded" @onclick="BackToEdit">
                ← 編集に戻る
            </button>
            <span class="text-lg font-semibold">結合結果プレビュー</span>
            <div></div> <!-- 右側のスペース確保 -->
        </div>
    </div>

    <!-- メインコンテンツエリア -->
    <div class="flex h-screen pt-16"> <!-- 上部バーの高さ分余白 -->
        <!-- 左側：PDFプレビューエリア -->
        <div class="flex-1 bg-gray-100 overflow-y-auto">
            <div class="p-4">
                <div id="pdf-preview-container" class="max-w-4xl mx-auto">
                    <iframe src="@mergedPdfUrl" class="w-full h-screen border-none" style="min-height: 800px;">
                    </iframe>
                </div>
            </div>
        </div>

        <!-- 右側：操作パネル -->
        <div class="w-80 bg-white border-l border-gray-300 p-6 overflow-y-auto">
            <div class="space-y-4">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">操作メニュー</h3>

                <!-- ダウンロードボタン -->
                <div class="bg-blue-50 p-4 rounded-lg">
                    <h4 class="font-medium text-gray-700 mb-2">ファイル操作</h4>
                    <a href="@mergedPdfUrl" target="_blank" download="merged.pdf"
                        class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded flex items-center justify-center gap-2">
                        <i class="fas fa-download"></i>
                        PDFをダウンロード
                    </a>
                </div>

                <!-- 共有機能（将来の拡張用） -->
                <div class="bg-green-50 p-4 rounded-lg">
                    <h4 class="font-medium text-gray-700 mb-2">共有</h4>
                    <button
                        class="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded flex items-center justify-center gap-2"
                        @onclick="SharePDF">
                        <i class="fas fa-share"></i>
                        リンクをコピー
                    </button>
                </div>

                <!-- 印刷機能 -->
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h4 class="font-medium text-gray-700 mb-2">出力</h4>
                    <button
                        class="w-full bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded flex items-center justify-center gap-2"
                        @onclick="PrintPDF">
                        <i class="fas fa-print"></i>
                        印刷
                    </button>
                </div>

                <!-- 新しい編集 -->
                <div class="bg-orange-50 p-4 rounded-lg">
                    <h4 class="font-medium text-gray-700 mb-2">新規作成</h4>
                    <button
                        class="w-full bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded flex items-center justify-center gap-2"
                        @onclick="StartNew">
                        <i class="fas fa-plus"></i>
                        新しいPDFを作成
                    </button>
                </div>

                <!-- ファイル情報 -->
                <div class="bg-gray-50 p-4 rounded-lg mt-6">
                    <h4 class="font-medium text-gray-700 mb-2">ファイル情報</h4>
                    <div class="text-sm text-gray-600 space-y-1">
                        <p><span class="font-medium">ページ数:</span> @pdfPageDataList.Count</p>
                        <p><span class="font-medium">作成日時:</span> @DateTime.Now.ToString("yyyy/MM/dd HH:mm")</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@* 初期ドロップゾーン *@
@if (!isFilesLoaded && !isLoading)
{
    <div id="drop-zone"
        class="flex items-center justify-center w-full h-screen border-2 border-dashed border-gray-400 cursor-pointer hover:bg-gray-100"
        @onclick="OpenFileDialog">
        <div class="text-center">
            <span class="text-2xl text-gray-500">ファイルをここにドラッグ＆ドロップ</span>
            <p class="text-sm text-gray-500 mt-2">またはクリックしてファイルを選択</p>
        </div>
    </div>
}

@* ローディング画面 *@
@if (isLoading)
{
    <div class="flex items-center justify-center w-full h-screen">
        <div class="text-center">
            <div class="w-64 h-4 bg-gray-200 rounded-full overflow-hidden">
                <div class="h-full bg-blue-500" style="width: @progress%;"></div>
            </div>
            <p class="text-sm text-gray-500 mt-2">読み込み中...</p>
        </div>
    </div>
}

@* エラーメッセージ *@
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="fixed top-20 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded z-50">
        @errorMessage
    </div>
}

<InputFile OnChange="HandleFileSelectionAsync" multiple="true" maxsize="52428800" style="display: none;"
    id="fileInput" />
<InputFile OnChange="HandleInsertFileSelectionAsync" style="display: none;" id="insertFileInput" />

<style>
    .thumbnail-item:hover .menu-overlay {
        display: flex !important;
    }

    .sortable-item-container {
        cursor: move;
    }

    /* 複数ページファイル用のスタックエフェクト */
    .thumbnail-stack {
        position: relative;
        margin: 8px; /* バッジのスペースを確保 */
    }

    .thumbnail-stack .stack-layer {
        position: relative;
        z-index: 3;
    }

    .thumbnail-stack::before {
        content: '';
        position: absolute;
        top: 4px;
        left: 4px;
        right: -4px;
        bottom: -4px;
        background: #f8f9fa;
        border: 1px solid #e5e7eb;
        border-radius: 6px;
        z-index: 1;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .thumbnail-stack::after {
        content: '';
        position: absolute;
        top: 8px;
        left: 8px;
        right: -8px;
        bottom: -8px;
        background: #f1f3f4;
        border: 1px solid #d1d5db;
        border-radius: 6px;
        z-index: 0;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    /* ページ数バッジ */
    .page-count-badge {
        position: absolute;
        top: -8px;
        right: -8px;
        background: #dc2626;
        color: white;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 11px;
        font-weight: bold;
        z-index: 10;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        border: 2px solid white;
        line-height: 1;
    }

    /* サムネイル画像の調整 */
    .thumbnail-stack .stack-layer img {
        border-radius: 4px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }

    /* コンテナの調整 */
    .thumbnail-container {
        padding: 8px;
        position: relative;
        min-width: 96px; /* サムネイル幅に合わせる */
        min-height: 160px; /* サムネイル高さ + ファイル情報表示エリア */
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    /* ドラッグ&ドロップスタイル */
    #drop-zone {
        transition: all 0.3s ease;
    }

    #drop-zone.drag-over {
        background-color: #e3f2fd !important;
        border-color: #2196f3 !important;
        transform: scale(1.02);
    }

    /* ローディングアニメーション */
    .page-loading {
        position: relative;
        background: #f3f4f6;
        border: 2px dashed #d1d5db;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 128px;
        animation: pulse 2s infinite;
    }

    .page-loading::before {
        content: '';
        width: 24px;
        height: 24px;
        border: 3px solid #e5e7eb;
        border-top: 3px solid #3b82f6;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .page-error {
        position: relative;
        background: #fef2f2;
        border: 2px solid #fca5a5;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 128px;
        color: #dc2626;
        font-size: 12px;
        text-align: center;
        padding: 8px;
    }

    @@keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* サムネイル読み込み完了時のアニメーション */
    .thumbnail-loaded {
        animation: fadeIn 0.5s ease-in-out;
    }

    @@keyframes fadeIn {
        0% { opacity: 0; transform: scale(0.95); }
        100% { opacity: 1; transform: scale(1); }
    }
    
    /* ファイル情報表示スタイル */
    .file-info {
        margin-top: 4px;
        text-align: center;
        width: 100%;
        max-width: 96px; /* サムネイル幅(w-24 = 96px)に合わせる */
        position: relative;
    }
    
    .file-name {
        font-size: 10px;
        color: #374151;
        font-weight: 500;
        line-height: 1.2;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        padding: 0 2px;
        cursor: pointer;
    }
    
    .page-number {
        font-size: 9px;
        color: #6b7280;
        font-weight: 400;
        line-height: 1.1;
        margin-top: 1px;
    }
    
    /* ホバー時にツールチップでファイル名全体を表示 */
    .file-name::after {
        content: attr(title);
        position: absolute;
        bottom: 100%;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 6px 12px;
        border-radius: 6px;
        font-size: 12px;
        white-space: normal;
        word-wrap: break-word;
        word-break: break-all;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.2s ease-in-out, visibility 0.2s ease-in-out;
        pointer-events: none;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        margin-bottom: 6px;
        min-width: 120px;
        max-width: 280px;
        text-align: center;
        font-weight: 500;
        letter-spacing: 0.5px;
        line-height: 1.4;
    }
    
    .file-name:hover::after {
        opacity: 1;
        visibility: visible;
    }
    
    /* 挿入メニュー用のスタイル - インライン管理方式 */
    .insert-menu.show {
        display: block !important;
    }
    
    .insert-menu.hide {
        display: none !important;
    }
    
    .insert-menu button:hover {
        background-color: #f3f4f6 !important;
    }
</style>

@code {
    private bool isFilesLoaded = false;
    private bool isLoading = false;
    private bool showMergedResult = false; // 結合結果表示フラグ
    private int progress = 0;
    private bool isPageView = false; // false: ファイル単位表示, true: ページ単位表示

    // ファイル情報を管理するクラス
    public class PdfFileInfo
    {
        public string FileName { get; set; } = "";
        public byte[] FileData { get; set; } = Array.Empty<byte>();
        public string CoverThumbnail { get; set; } = ""; // 表紙サムネイル
        public List<string> AllThumbnails { get; set; } = new(); // 全ページサムネイル（遅延読み込み）
        public List<string> AllPageData { get; set; } = new(); // 全ページデータ（遅延読み込み）
        public int PageCount { get; set; } = 0;
        public bool IsFullyLoaded { get; set; } = false; // 全ページが読み込まれているか
    }

    // ページ情報を管理するクラス
    public class PageInfo
    {
        public string FileId { get; set; } = ""; // 元ファイルのID
        public string FileName { get; set; } = "";
        public int PageIndex { get; set; } = 0; // ファイル内でのページ番号
        public string Thumbnail { get; set; } = "";
        public string PageData { get; set; } = "";
        public bool IsLoading { get; set; } = true; // ローディング中かどうか
        public bool HasError { get; set; } = false; // エラーが発生したかどうか
    }

    // 互換性のためのページデータクラス
    public class PdfPageData
    {
        public string FileName { get; set; } = "";
        public int PageIndex { get; set; } = 0;
        public string ThumbnailData { get; set; } = "";
        public string PageData { get; set; } = "";
    }

    private List<PdfFileInfo> pdfFiles = new();
    private List<PageInfo> pageItems = new(); // ページ単位表示用
    private string? mergedPdfUrl;
    private string? errorMessage;
    
    // 互換性のための追加フィールド
    private List<byte[]> pdfDataList = new List<byte[]>();

    // 互換性のためのプロパティ（既存コードとの互換性維持）
    private List<string> pageThumbnails => isPageView ? pageItems.Select(p => p.Thumbnail).ToList() : GetDisplayThumbnails();
    private List<PdfPageData> pdfPageDataList => isPageView ? GetPageDataList() : GetFileDataList();

    private List<string> GetDisplayThumbnails()
    {
        return pdfFiles.Select(f => f.CoverThumbnail).ToList();
    }

    private List<PdfPageData> GetPageDataList()
    {
        return pageItems.Select(p => new PdfPageData 
        { 
            FileName = p.FileName,
            PageIndex = p.PageIndex,
            ThumbnailData = p.Thumbnail,
            PageData = p.PageData 
        }).ToList();
    }

    private List<PdfPageData> GetFileDataList()
    {
        var result = new List<PdfPageData>();
        foreach (var file in pdfFiles)
        {
            // ファイル表示時は全ページのデータを含める
            if (file.IsFullyLoaded && file.AllPageData.Count > 0)
            {
                for (int i = 0; i < file.AllPageData.Count; i++)
                {
                    result.Add(new PdfPageData 
                    { 
                        FileName = file.FileName,
                        PageIndex = i,
                        ThumbnailData = i < file.AllThumbnails.Count ? file.AllThumbnails[i] : "",
                        PageData = file.AllPageData[i]
                    });
                }
            }
            else
            {
                // フォールバック：表紙のみ
                result.Add(new PdfPageData 
                { 
                    FileName = file.FileName,
                    PageIndex = 0,
                    ThumbnailData = file.CoverThumbnail,
                    PageData = "" // ファイル表示時でデータが不完全な場合
                });
            }
        }
        return result;
    }
    
    // ファイル名を短縮表示するヘルパーメソッド
    private string TruncateFileName(string fileName, int maxLength = 12)
    {
        if (string.IsNullOrEmpty(fileName))
            return "";
            
        // 拡張子を除いたファイル名を取得
        var nameWithoutExtension = Path.GetFileNameWithoutExtension(fileName);
        var extension = Path.GetExtension(fileName);
        
        if (nameWithoutExtension.Length <= maxLength)
            return fileName;
            
        // 長い場合は途中を省略
        var truncated = nameWithoutExtension.Substring(0, maxLength - 1) + "…";
        return truncated + extension;
    }
    
    // 現在のアイテムの表示情報を取得するヘルパーメソッド
    private (string fileName, int pageNumber, string displayFileName) GetItemDisplayInfo(int index)
    {
        if (isPageView && index < pageItems.Count)
        {
            // ページ単位表示
            var pageItem = pageItems[index];
            return (pageItem.FileName, pageItem.PageIndex + 1, TruncateFileName(pageItem.FileName));
        }
        else if (!isPageView && index < pdfFiles.Count)
        {
            // ファイル単位表示
            var file = pdfFiles[index];
            return (file.FileName, 0, TruncateFileName(file.FileName));
        }
        
        return ("", 0, "");
    }

    // 表示モード切り替えメソッド
    private async Task SwitchView(bool pageView)
    {
        if (isPageView == pageView) return;

        Console.WriteLine($"SwitchView: {(isPageView ? "Page" : "File")} -> {(pageView ? "Page" : "File")}");
        Console.WriteLine($"Before switch - pdfFiles: {pdfFiles.Count}, pageItems: {pageItems.Count}");

        isPageView = pageView;
        
        if (isPageView)
        {
            // ページ単位表示に切り替え：全ページを展開
            await LoadAllPagesAsync();
        }
        else
        {
            // ファイル単位表示に切り替え：pageItemsからpdfFilesを再構築
            SynchronizeFilesFromPages();
        }
        
        StateHasChanged();
        
        // ソート機能を再初期化
        await Task.Delay(100);
        await InitializeSortableAfterLoad();
        
        Console.WriteLine($"After switch - pdfFiles: {pdfFiles.Count}, pageItems: {pageItems.Count}");
    }
    
    // ページ単位データからファイル単位データを再構築
    private void SynchronizeFilesFromPages()
    {
        Console.WriteLine("SynchronizeFilesFromPages: Rebuilding pdfFiles from pageItems");
        
        // 既存のファイル情報を保持しつつ、pageItemsの順序に基づいて再構築
        var newPdfFiles = new List<PdfFileInfo>();
        var processedFiles = new HashSet<string>();
        
        foreach (var pageItem in pageItems)
        {
            if (!processedFiles.Contains(pageItem.FileId))
            {
                processedFiles.Add(pageItem.FileId);
                
                // 既存のファイル情報を検索
                var existingFile = pdfFiles.FirstOrDefault(f => f.FileName == pageItem.FileId);
                
                if (existingFile != null)
                {
                    // 既存ファイルの情報をコピー
                    var fileInfo = new PdfFileInfo
                    {
                        FileName = existingFile.FileName,
                        FileData = existingFile.FileData,
                        CoverThumbnail = existingFile.CoverThumbnail,
                        AllThumbnails = existingFile.AllThumbnails,
                        AllPageData = existingFile.AllPageData,
                        PageCount = existingFile.PageCount,
                        IsFullyLoaded = existingFile.IsFullyLoaded
                    };
                    
                    // ページ順序が変更されている可能性があるため、pageItemsから再構築
                    var filePages = pageItems.Where(p => p.FileId == pageItem.FileId).ToList();
                    if (filePages.Count > 0)
                    {
                        // サムネイルとページデータを順序通りに再構築
                        var reorderedThumbnails = new List<string>();
                        var reorderedPageData = new List<string>();
                        
                        foreach (var page in filePages)
                        {
                            reorderedThumbnails.Add(page.Thumbnail);
                            reorderedPageData.Add(page.PageData);
                        }
                        
                        if (fileInfo.IsFullyLoaded)
                        {
                            fileInfo.AllThumbnails = reorderedThumbnails;
                            fileInfo.AllPageData = reorderedPageData;
                        }
                        
                        fileInfo.PageCount = filePages.Count;
                        
                        // 表紙サムネイルを更新
                        if (reorderedThumbnails.Count > 0 && !string.IsNullOrEmpty(reorderedThumbnails[0]))
                        {
                            fileInfo.CoverThumbnail = reorderedThumbnails[0];
                        }
                    }
                    
                    newPdfFiles.Add(fileInfo);
                    Console.WriteLine($"Rebuilt file: {fileInfo.FileName} with {fileInfo.PageCount} pages");
                }
                else
                {
                    // 新しいファイル（ページ単位で追加されたもの）
                    var filePages = pageItems.Where(p => p.FileId == pageItem.FileId).ToList();
                    if (filePages.Count > 0)
                    {
                        var thumbnails = filePages.Select(p => p.Thumbnail).ToList();
                        var pageData = filePages.Select(p => p.PageData).ToList();
                        
                        // FileDataを復元（ファイル名ベースでpdfDataListから検索）
                        byte[] fileData = Array.Empty<byte>();
                        var matchingFile = pdfFiles.FirstOrDefault(f => f.FileName == pageItem.FileId);
                        if (matchingFile != null)
                        {
                            fileData = matchingFile.FileData;
                        }
                        else
                        {
                            // フォールバック：pdfDataListから最新のものを使用
                            if (pdfDataList.Count > 0)
                            {
                                fileData = pdfDataList.Last();
                            }
                        }
                        
                        var newFileInfo = new PdfFileInfo
                        {
                            FileName = pageItem.FileId,
                            FileData = fileData,
                            CoverThumbnail = thumbnails.Count > 0 ? thumbnails[0] : "",
                            AllThumbnails = thumbnails,
                            AllPageData = pageData,
                            PageCount = filePages.Count,
                            IsFullyLoaded = true // ページ単位で追加されたものは完全読み込み済み
                        };
                        
                        newPdfFiles.Add(newFileInfo);
                        Console.WriteLine($"Created new file from pages: {newFileInfo.FileName} with {newFileInfo.PageCount} pages");
                    }
                }
            }
        }
        
        pdfFiles = newPdfFiles;
        Console.WriteLine($"SynchronizeFilesFromPages completed. Total files: {pdfFiles.Count}");
    }

    // 遅延読み込み：特定のファイルの全ページデータを読み込み
    private async Task LoadAllPagesForFile(PdfFileInfo file)
    {
        if (file.IsFullyLoaded) return; // 既に読み込み済み

        try
        {
            Console.WriteLine($"Loading all pages for file: {file.FileName}");
            
            // 全ページのサムネイルを生成
            var allThumbnails = await JSRuntime.InvokeAsync<List<string>>("renderPDFPages", file.FileData);
            if (allThumbnails != null && allThumbnails.Count > 0)
            {
                file.AllThumbnails = allThumbnails;
                Console.WriteLine($"Loaded {allThumbnails.Count} thumbnails for {file.FileName}");
                
                // 全ページのデータを抽出
                var pageDataList = await JSRuntime.InvokeAsync<List<string>>("extractPDFPages", file.FileData);
                if (pageDataList != null)
                {
                    file.AllPageData = pageDataList;
                    Console.WriteLine($"Loaded {pageDataList.Count} page data for {file.FileName}");
                }
                else
                {
                    file.AllPageData = new List<string>();
                    Console.WriteLine($"Failed to load page data for {file.FileName}");
                }
                
                file.IsFullyLoaded = true;
                Console.WriteLine($"File {file.FileName} fully loaded");
            }
            else
            {
                Console.WriteLine($"Failed to load thumbnails for {file.FileName}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading all pages for {file.FileName}: {ex.Message}");
            errorMessage = $"ページ読み込みに失敗しました: {file.FileName}";
        }
    }

    // 全ページを展開してページ単位表示用データを準備
    private async Task LoadAllPagesAsync()
    {
        pageItems.Clear();
        
        Console.WriteLine($"LoadAllPagesAsync: Processing {pdfFiles.Count} files");
        
        // Phase 1: プレースホルダーを先に作成
        foreach (var file in pdfFiles)
        {
            Console.WriteLine($"Creating placeholders for {file.FileName}, PageCount: {file.PageCount}");
            
            for (int i = 0; i < file.PageCount; i++)
            {
                var pageInfo = new PageInfo
                {
                    FileId = file.FileName,
                    FileName = file.FileName,
                    PageIndex = i,
                    Thumbnail = "", // 空のサムネイル
                    PageData = "",
                    IsLoading = true, // ローディング中
                    HasError = false
                };
                
                // 表紙がある場合は即座に表示
                if (i == 0 && !string.IsNullOrEmpty(file.CoverThumbnail))
                {
                    pageInfo.Thumbnail = file.CoverThumbnail;
                    pageInfo.IsLoading = false;
                }
                
                pageItems.Add(pageInfo);
            }
        }
        
        Console.WriteLine($"Created {pageItems.Count} placeholders");
        StateHasChanged(); // プレースホルダーを表示
        
        // Phase 2: 各ファイルのページを順次読み込み（並列ではなく順次処理でメモリ効率を向上）
        int globalPageIndex = 0;
        
        foreach (var file in pdfFiles)
        {
            Console.WriteLine($"Loading pages for {file.FileName}...");
            
            // 順次処理でページを読み込み
            await LoadPagesForFileAsync(file, globalPageIndex);
            
            globalPageIndex += file.PageCount;
        }
        
        Console.WriteLine($"LoadAllPagesAsync completed for all files");
    }
    
    // 特定ファイルのページを非同期で読み込み、完成次第UI更新
    private async Task LoadPagesForFileAsync(PdfFileInfo file, int startIndex)
    {
        try
        {
            Console.WriteLine($"LoadPagesForFileAsync started for {file.FileName}, startIndex: {startIndex}");
            
            if (!file.IsFullyLoaded)
            {
                // 従来の方法で全ページサムネイルを読み込み
                await LoadAllPagesForFile(file);
                
                if (file.IsFullyLoaded && file.AllThumbnails.Count > 0)
                {
                    // 各ページのサムネイルを順次更新
                    for (int i = 0; i < file.AllThumbnails.Count; i++)
                    {
                        var pageIndex = startIndex + i;
                        if (pageIndex < pageItems.Count)
                        {
                            await UpdatePageThumbnail(pageIndex, file.AllThumbnails[i], 
                                i < file.AllPageData.Count ? file.AllPageData[i] : "");
                            await Task.Delay(100); // 順次表示効果
                        }
                    }
                }
                else
                {
                    Console.WriteLine($"Failed to load thumbnails for {file.FileName}");
                    await SetPagesError(startIndex, file.PageCount);
                }
            }
            else if (file.AllThumbnails.Count > 0)
            {
                // 既に読み込み済みの場合は順次表示
                for (int i = 0; i < file.AllThumbnails.Count; i++)
                {
                    await UpdatePageThumbnail(startIndex + i, file.AllThumbnails[i], 
                        i < file.AllPageData.Count ? file.AllPageData[i] : "");
                    await Task.Delay(100); // 順次表示効果
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading pages for {file.FileName}: {ex.Message}");
            await SetPagesError(startIndex, file.PageCount);
        }
    }
    
    // 個別ページのサムネイル更新
    private async Task UpdatePageThumbnail(int pageIndex, string thumbnail, string pageData)
    {
        if (pageIndex >= 0 && pageIndex < pageItems.Count)
        {
            await InvokeAsync(() =>
            {
                pageItems[pageIndex].Thumbnail = thumbnail;
                pageItems[pageIndex].PageData = pageData;
                pageItems[pageIndex].IsLoading = false;
                pageItems[pageIndex].HasError = false; // エラー状態をリセット
                StateHasChanged();
            });
            Console.WriteLine($"Updated page {pageIndex} with thumbnail");
        }
    }
    
    // エラー状態に設定
    private async Task SetPagesError(int startIndex, int pageCount)
    {
        for (int i = 0; i < pageCount; i++)
        {
            var pageIndex = startIndex + i;
            if (pageIndex < pageItems.Count)
            {
                await InvokeAsync(() =>
                {
                    pageItems[pageIndex].IsLoading = false;
                    pageItems[pageIndex].HasError = true;
                    StateHasChanged();
                });
            }
        }
    }
    
    // 静的インスタンスで現在のコンポーネントを参照（並び替え用）
    private static Merge? _currentInstance;

    // JavaScript から呼び出される並び替えメソッド
    [JSInvokable("UpdateOrder")]
    public static async Task UpdateOrder(int oldIndex, int newIndex)
    {
        Console.WriteLine($"UpdateOrder called with oldIndex: {oldIndex}, newIndex: {newIndex}");

        if (_currentInstance != null)
        {
            Console.WriteLine($"Current instance found, calling UpdateOrderInternal");
            await _currentInstance.UpdateOrderInternal(oldIndex, newIndex);
        }
        else
        {
            Console.WriteLine($"ERROR: Current instance is null!");
        }
    }
    // 実際の並び替え処理（DOM状態をBlazorに完全同期）
    private async Task UpdateOrderInternal(int oldIndex, int newIndex)
    {
        try
        {
            Console.WriteLine($"UpdateOrderInternal called: {oldIndex} -> {newIndex}");
            Console.WriteLine($"Current mode - isPageView: {isPageView}");
            Console.WriteLine($"Current counts - pageThumbnails: {pageThumbnails?.Count}, pdfFiles: {pdfFiles.Count}, pageItems: {pageItems.Count}");

            var currentCount = pageThumbnails?.Count ?? 0;
            
            if (oldIndex >= 0 && oldIndex < currentCount &&
                newIndex >= 0 && newIndex < currentCount &&
                oldIndex != newIndex)
            {
                // シンプルで確実な方法：C#のCollectionsAPIを使用
                void MoveItem<T>(List<T> list, int from, int to)
                {
                    if (from >= 0 && from < list.Count && to >= 0 && to <= list.Count)
                    {
                        var item = list[from];
                        list.RemoveAt(from);
                        list.Insert(to, item);
                    }
                }

                if (isPageView)
                {
                    // ページ単位表示：pageItemsを並び替え
                    Console.WriteLine("Reordering in page view mode");
                    MoveItem(pageItems, oldIndex, newIndex);
                }
                else
                {
                    // ファイル単位表示：pdfFilesを並び替え
                    Console.WriteLine("Reordering in file view mode");
                    MoveItem(pdfFiles, oldIndex, newIndex);
                }

                Console.WriteLine($"Successfully moved item from {oldIndex} to {newIndex}");

                // DOM更新
                await InvokeAsync(async () =>
                {
                    StateHasChanged();
                    await Task.Delay(100);
                    await JSRuntime.InvokeVoidAsync("initializeSortable");
                });

            }
            else
            {
                Console.WriteLine($"Invalid move operation: oldIndex={oldIndex}, newIndex={newIndex}, count={currentCount}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in UpdateOrderInternal: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            errorMessage = $"並び替えに失敗しました: {ex.Message}";
        }
        finally
        {

        }
    }

    private async Task TestSwapFirstTwo()
    {
        Console.WriteLine("=== テスト用並び替え開始 ===");

        if (pageThumbnails.Count >= 2)
        {
            Console.WriteLine($"Before swap - Thumbnails count: {pageThumbnails.Count}");
            Console.WriteLine($"Before swap - First thumbnail: {pageThumbnails[0].Substring(0, 50)}...");
            Console.WriteLine($"Before swap - Second thumbnail: {pageThumbnails[1].Substring(0, 50)}...");

            // 1. データを入れ替え
            var firstThumbnail = pageThumbnails[0];
            var firstPageData = pdfPageDataList[0];

            pageThumbnails[0] = pageThumbnails[1];
            pageThumbnails[1] = firstThumbnail;

            pdfPageDataList[0] = pdfPageDataList[1];
            pdfPageDataList[1] = firstPageData;

            Console.WriteLine($"After swap - First thumbnail: {pageThumbnails[0].Substring(0, 50)}...");
            Console.WriteLine($"After swap - Second thumbnail: {pageThumbnails[1].Substring(0, 50)}...");

            // 2. DOM更新
            Console.WriteLine("Calling StateHasChanged...");
            StateHasChanged();

            // 3. Sortable再初期化
            await Task.Delay(100);
            Console.WriteLine("Reinitializing sortable...");
            await JSRuntime.InvokeVoidAsync("initializeSortable");

            Console.WriteLine("=== テスト用並び替え完了 ===");
        }
        else
        {
            Console.WriteLine("Not enough thumbnails to swap (need at least 2)");
            errorMessage = "並び替えテストには最低2枚のサムネイルが必要です";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isFilesLoaded && firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeSortable");
        }
    }

    // ...existing code...
    private async Task OpenFileDialog()
    {
        Console.WriteLine("OpenFileDialog called");
        try
        {
            await JSRuntime.InvokeVoidAsync("openFileDialog", "fileInput");
            Console.WriteLine("File dialog opened successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error opening file dialog: {ex.Message}");
            errorMessage = $"ファイル選択ダイアログの表示に失敗しました: {ex.Message}";
        }
    }

    // 削除処理（Blazorで完全管理）
    private void RemovePage(int index)
    {
        Console.WriteLine($"RemovePage called with index: {index}");
        Console.WriteLine($"Current mode - isPageView: {isPageView}");
        Console.WriteLine($"Current counts - pageThumbnails: {pageThumbnails?.Count}, pdfFiles: {pdfFiles.Count}, pageItems: {pageItems.Count}");
        
        if (index >= 0 && index < (pageThumbnails?.Count ?? 0))
        {
            try
            {
                if (isPageView)
                {
                    // ページ単位表示：pageItemsから削除
                    Console.WriteLine("Removing page in page view mode");
                    if (index < pageItems.Count)
                    {
                        pageItems.RemoveAt(index);
                        Console.WriteLine($"Removed page at index {index} from pageItems");
                    }
                }
                else
                {
                    // ファイル単位表示：pdfFilesから削除
                    Console.WriteLine("Removing file in file view mode");
                    if (index < pdfFiles.Count)
                    {
                        var fileName = pdfFiles[index].FileName;
                        pdfFiles.RemoveAt(index);
                        Console.WriteLine($"Removed file {fileName} at index {index} from pdfFiles");
                    }
                }

                Console.WriteLine($"Page/File {index} removed successfully.");

                // 重要：DOM再構築
                StateHasChanged();

                // Sortable再初期化
                InvokeAsync(async () =>
                {
                    await Task.Delay(100);
                    await JSRuntime.InvokeVoidAsync("initializeSortable");
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error removing page/file {index}: {ex.Message}");
                errorMessage = $"削除に失敗しました: {ex.Message}";
            }
        }
        else
        {
            Console.WriteLine($"Invalid remove index: {index}, valid range: 0-{(pageThumbnails?.Count ?? 0) - 1}");
        }
    }

    // ファイル展開機能（ファイル単位表示から特定のファイルの全ページを展開）
    private async Task ExpandFile(int fileIndex)
    {
        if (fileIndex >= 0 && fileIndex < pdfFiles.Count && !isPageView)
        {
            try
            {
                var file = pdfFiles[fileIndex];
                Console.WriteLine($"Expanding file {file.FileName} at index {fileIndex}");
                
                // まだ全ページが読み込まれていない場合は遅延読み込み
                if (!file.IsFullyLoaded)
                {
                    Console.WriteLine($"Loading all pages for expansion: {file.FileName}");
                    isLoading = true;
                    StateHasChanged();
                    
                    await LoadAllPagesForFile(file);
                    
                    isLoading = false;
                    StateHasChanged();
                }
                
                if (file.IsFullyLoaded && file.AllThumbnails.Count > 0)
                {
                    // ファイルの全ページを挿入位置に展開
                    for (int i = 0; i < file.AllThumbnails.Count; i++)
                    {
                        var pageInfo = new PageInfo
                        {
                            FileId = file.FileName,
                            FileName = file.FileName,
                            PageIndex = i,
                            Thumbnail = file.AllThumbnails[i],
                            PageData = i < file.AllPageData.Count ? file.AllPageData[i] : ""
                        };
                        pageItems.Add(pageInfo);
                    }
                    
                    // ファイルを削除
                    pdfFiles.RemoveAt(fileIndex);
                    
                    // ページ単位表示に切り替え
                    isPageView = true;
                    StateHasChanged();
                    
                    // ソート機能を再初期化
                    await Task.Delay(100);
                    await InitializeSortableAfterLoad();
                    
                    Console.WriteLine($"File {file.FileName} expanded successfully");
                }
                else
                {
                    errorMessage = $"ファイル {file.FileName} の全ページ読み込みに失敗しました";
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error expanding file: {ex.Message}");
                errorMessage = $"ファイル展開に失敗しました: {ex.Message}";
                isLoading = false;
            }
        }
    }

    // 回転処理（Blazorで完全管理）
    private async Task RotatePage(int index)
    {
        if (index >= 0 && index < pageThumbnails.Count)
        {
            try
            {
                Console.WriteLine($"Rotating page {index}...");

                // サムネイルを回転
                var thumbnail = pageThumbnails[index];
                var rotatedThumbnail = await JSRuntime.InvokeAsync<string>("rotateImage", thumbnail);
                if (rotatedThumbnail != null)
                {
                    pageThumbnails[index] = rotatedThumbnail;
                    Console.WriteLine($"Thumbnail {index} rotated successfully");
                }

                // 対応するPDFページも回転
                if (index < pdfPageDataList.Count)
                {
                    Console.WriteLine($"Rotating PDF page data {index}...");
                    var currentPageData = pdfPageDataList[index];
                    var rotatedPageData = await JSRuntime.InvokeAsync<string>("rotatePDFPage", currentPageData.PageData);
                    if (rotatedPageData != null)
                    {
                        pdfPageDataList[index] = new PdfPageData
                        {
                            FileName = currentPageData.FileName,
                            PageIndex = currentPageData.PageIndex,
                            ThumbnailData = rotatedThumbnail ?? "",
                            PageData = rotatedPageData
                        };
                        Console.WriteLine($"PDF page data {index} rotated successfully");
                    }
                    else
                    {
                        Console.WriteLine($"rotatePDFPage returned null for page {index}");
                    }
                }

                Console.WriteLine($"Page {index} rotation completed.");

                // 重要：コメントアウトを解除
                StateHasChanged();

                // Sortable再初期化
                await Task.Delay(100);
                await JSRuntime.InvokeVoidAsync("initializeSortable");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error rotating page {index}: {ex.Message}");
                errorMessage = $"ページ {index + 1} の回転に失敗しました: {ex.Message}";
            }
        }
    }

    private async Task HandleFileSelectionAsync(InputFileChangeEventArgs e)
    {
        Console.WriteLine($"HandleFileSelectionAsync called with {e.FileCount} files");
        
        if (e.FileCount == 0)
        {
            Console.WriteLine("No files selected");
            return;
        }

        isLoading = true;
        progress = 0;
        errorMessage = null; // エラーメッセージをクリア
        const long maxFileSize = 52428800; // 50MB

        foreach (var file in e.GetMultipleFiles())
        {
            Console.WriteLine($"Processing file: {file.Name}, Size: {file.Size} bytes");
            try
            {
                using var stream = file.OpenReadStream(maxFileSize);
                using var memoryStream = new MemoryStream();
                var buffer = new byte[8192];
                long totalBytesRead = 0;
                int bytesRead;

                while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                {
                    await memoryStream.WriteAsync(buffer, 0, bytesRead);
                    totalBytesRead += bytesRead;

                    progress = (int)((totalBytesRead / (double)file.Size) * 100);
                    StateHasChanged();
                }

                var pdfData = memoryStream.ToArray();
                pdfDataList.Add(pdfData);
                Console.WriteLine($"File {file.Name} read successfully, data size: {pdfData.Length} bytes");

                // 高速表示のため、最初は表紙サムネイルとページ数のみ取得
                Console.WriteLine($"Calling renderFirstPDFPage for {file.Name} (fast loading)");
                var coverThumbnail = await JSRuntime.InvokeAsync<string>("renderFirstPDFPage", pdfData);
                var pageCount = await JSRuntime.InvokeAsync<int>("getPDFPageCount", pdfData);
                
                if (coverThumbnail != null && pageCount > 0)
                {
                    Console.WriteLine($"Generated cover thumbnail for {file.Name}, total pages: {pageCount}");

                    // 新しいファイル構造にデータを格納（遅延読み込み用）
                    var pdfFileInfo = new PdfFileInfo
                    {
                        FileName = file.Name,
                        FileData = pdfData,
                        CoverThumbnail = coverThumbnail,
                        AllThumbnails = new List<string>(), // 遅延読み込み
                        AllPageData = new List<string>(), // 遅延読み込み
                        PageCount = pageCount,
                        IsFullyLoaded = false // まだ全ページは読み込まれていない
                    };

                    // ファイルリストに追加
                    pdfFiles.Add(pdfFileInfo);
                    Console.WriteLine($"Added file {file.Name} to pdfFiles list (fast mode). Total files: {pdfFiles.Count}");
                }
                else
                {
                    Console.WriteLine($"Fast loading failed for {file.Name}, falling back to full loading");
                    // フォールバック：従来の全ページ読み込み
                    var newThumbnails = await JSRuntime.InvokeAsync<List<string>>("renderPDFPages", pdfData);
                    if (newThumbnails != null && newThumbnails.Count > 0)
                    {
                        var pdfFileInfo = new PdfFileInfo
                        {
                            FileName = file.Name,
                            FileData = pdfData,
                            CoverThumbnail = newThumbnails[0],
                            AllThumbnails = newThumbnails,
                            PageCount = newThumbnails.Count,
                            IsFullyLoaded = true
                        };

                        // ページデータも取得
                        try
                        {
                            var pageDataList = await JSRuntime.InvokeAsync<List<string>>("extractPDFPages", pdfData);
                            pdfFileInfo.AllPageData = pageDataList ?? new List<string>();
                        }
                        catch (Exception)
                        {
                            pdfFileInfo.AllPageData = new List<string>();
                        }

                        pdfFiles.Add(pdfFileInfo);
                        Console.WriteLine($"Added file {file.Name} using fallback method");
                    }
                    else
                    {
                        Console.WriteLine($"Failed to process {file.Name}");
                        errorMessage = $"ファイル処理に失敗しました: {file.Name}";
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error processing file {file.Name}: {ex.Message}");
                errorMessage = $"Error processing file {file.Name}. Please try again. {ex.Message}";
            }
        }

        isLoading = false;
        isFilesLoaded = pdfFiles.Count > 0; // ファイルが実際に追加された場合のみtrue
        Console.WriteLine($"File loading completed. isFilesLoaded: {isFilesLoaded}, pdfFiles.Count: {pdfFiles.Count}");
        StateHasChanged();

        if (isFilesLoaded)
        {
            await InitializeSortableAfterLoad();
        }

        Console.WriteLine($"Total files loaded: {pdfFiles.Count}");
        Console.WriteLine($"Total thumbnails (computed): {pageThumbnails?.Count}");
        Console.WriteLine($"Total page data (computed): {pdfPageDataList?.Count}");
    }

    // PDFを結合する処理（結果表示モードに切り替え）
    private async Task MergePDFs()
    {
        try
        {
            Console.WriteLine("=== PDF結合開始 ===");
            
            // ファイル単位表示の場合、まだ読み込まれていないファイルの全ページを読み込み
            if (!isPageView)
            {
                bool needsLoading = pdfFiles.Any(f => !f.IsFullyLoaded);
                if (needsLoading)
                {
                    Console.WriteLine("Loading all pages for merge...");
                    isLoading = true;
                    StateHasChanged();
                    
                    foreach (var file in pdfFiles.Where(f => !f.IsFullyLoaded))
                    {
                        await LoadAllPagesForFile(file);
                    }
                    
                    isLoading = false;
                    StateHasChanged();
                }
            }
            
            // デバッグ: 結合前のデータ順序を確認
            Console.WriteLine("=== 結合前のデータ順序 ===");
            for (int i = 0; i < pdfPageDataList.Count; i++)
            {
                var pageData = pdfPageDataList[i];
                var dataPreview = pageData.PageData.Length > 50 ? pageData.PageData.Substring(0, 50) + "..." : pageData.PageData;
                Console.WriteLine($"Index {i}: {pageData.FileName} (Page {pageData.PageIndex}): {dataPreview}");
            }
            if (pdfPageDataList.Count == 0)
            {
                errorMessage = "No PDF files to merge.";
                Console.WriteLine("No files selected.");
                return;
            }

            errorMessage = null;

            // 並び替えられたページデータを使用してPDFを結合
            mergedPdfUrl = await JSRuntime.InvokeAsync<string>("mergePDFPages", pdfPageDataList);

            if (!string.IsNullOrEmpty(mergedPdfUrl))
            {
                // 結合成功：結果表示モードに切り替え
                showMergedResult = true;
                StateHasChanged();
                Console.WriteLine("Switched to result view mode");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            errorMessage = "An error occurred while merging PDFs. Please try again.";
            isLoading = false;
        }
    }

    // 編集モードに戻る
    private void BackToEdit()
    {
        showMergedResult = false;
        StateHasChanged();

        // Sortableを再初期化
        InvokeAsync(async () =>
        {
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("initializeSortable");
        });
    }

    // 共有機能
    private async Task SharePDF()
    {
        if (!string.IsNullOrEmpty(mergedPdfUrl))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", mergedPdfUrl);
            // 成功メッセージを表示（必要に応じて）
            Console.WriteLine("PDF URL copied to clipboard");
        }
    }

    // 印刷機能
    private async Task PrintPDF()
    {
        if (!string.IsNullOrEmpty(mergedPdfUrl))
        {
            await JSRuntime.InvokeVoidAsync("window.open", mergedPdfUrl, "_blank");
        }
    }

    // 新規作成
    private void StartNew()
    {
        // データをリセット
        pdfDataList.Clear();
        pdfFiles.Clear();
        pageItems.Clear();
        mergedPdfUrl = null;
        errorMessage = null;
        showMergedResult = false;
        isFilesLoaded = false;
        isPageView = false; // ファイル単位表示に戻す

        StateHasChanged();
    }

    private async Task InitializeSortableAfterLoad()
    {
        if (isFilesLoaded && pageThumbnails.Any())
        {
            try
            {
                // DOMの更新を待つ
                await Task.Delay(200);

                Console.WriteLine("Initializing sortable after file load");
                await JSRuntime.InvokeVoidAsync("initializeSortable");

                Console.WriteLine("Sortable initialized successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing sortable: {ex.Message}");
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _currentInstance = this;
            Console.WriteLine("Current instance set in OnAfterRenderAsync");
            
            // ドラッグ&ドロップ初期化
            InvokeAsync(async () =>
            {
                try
                {
                    await JSRuntime.InvokeVoidAsync("initializeDragDrop");
                    Console.WriteLine("Drag and drop initialized");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error initializing drag and drop: {ex.Message}");
                }
            });
        }
    }

    private int showInsertMenuIndex = -1; // どの位置の挿入メニューを表示するか
    private int insertPosition = -1; // PDFを挿入する位置
    private HashSet<int> openMenus = new HashSet<int>(); // 開いているメニューのインデックスを管理

    // JavaScript から呼び出される空白ページ挿入メソッド
    [JSInvokable("InsertBlankPageFromJS")]
    public static async Task InsertBlankPageFromJS(int position)
    {
        if (_currentInstance != null)
        {
            await _currentInstance.InsertBlankPage(position);
        }
    }

    // JavaScript から呼び出されるPDF挿入メソッド
    [JSInvokable("InsertPdfAtPositionFromJS")]
    public static async Task InsertPdfAtPositionFromJS(int position)
    {
        if (_currentInstance != null)
        {
            await _currentInstance.InsertPdfAtPosition(position);
        }
    }

    // 挿入ボタンクリック処理（クリック位置を直接指定してメニュー動的生成）
    private async Task HandleInsertButtonClick(int position, MouseEventArgs e)
    {
        Console.WriteLine($"=== HandleInsertButtonClick called ===");
        Console.WriteLine($"Position: {position}");
        Console.WriteLine($"Mouse Event Details:");
        Console.WriteLine($"  ClientX: {e.ClientX}");
        Console.WriteLine($"  ClientY: {e.ClientY}");
        Console.WriteLine($"  ScreenX: {e.ScreenX}");
        Console.WriteLine($"  ScreenY: {e.ScreenY}");
        Console.WriteLine($"  OffsetX: {e.OffsetX}");
        Console.WriteLine($"  OffsetY: {e.OffsetY}");
        Console.WriteLine($"  PageX: {e.PageX}");
        Console.WriteLine($"  PageY: {e.PageY}");
        Console.WriteLine($"  Button: {e.Button}");
        Console.WriteLine($"  Type: {e.Type}");
        
        // すべての既存メニューを非表示にする
        await JSRuntime.InvokeVoidAsync("hideAllInsertMenus");
        
        // クリック座標を直接JavaScriptに渡してメニューを表示
        await JSRuntime.InvokeVoidAsync("showInsertMenuAtExactPosition", position, e.ClientX, e.ClientY);
        
        showInsertMenuIndex = position;
        StateHasChanged();
        
        Console.WriteLine($"=== HandleInsertButtonClick completed ===");
    }
    
    // 特定位置のメニューが開いているかチェック
    private bool IsMenuOpen(int position)
    {
        return openMenus.Contains(position);
    }

    // 空白ページを挿入
    private async Task InsertBlankPage(int position)
    {
        try
        {
            Console.WriteLine($"Inserting blank page at position {position}");
            Console.WriteLine($"Current mode - isPageView: {isPageView}");
            Console.WriteLine($"Current counts - pageThumbnails: {pageThumbnails?.Count}, pdfFiles: {pdfFiles.Count}, pageItems: {pageItems.Count}");

            // 空白ページのPDFデータとサムネイルを生成
            var blankPageData = await JSRuntime.InvokeAsync<string>("createBlankPage");
            var blankThumbnail = await JSRuntime.InvokeAsync<string>("renderSinglePDFPage", blankPageData);

            if (blankPageData != null && blankThumbnail != null)
            {
                Console.WriteLine("Blank page data generated successfully");
                
                // 挿入位置を検証
                var currentCount = pageThumbnails?.Count ?? 0;
                var safePosition = Math.Min(position, currentCount);
                
                Console.WriteLine($"Insert position: {position}, Safe position: {safePosition}, Current count: {currentCount}");

                // pdfDataListにも追加（互換性のため）
                pdfDataList.Add(Convert.FromBase64String(blankPageData));

                // 空白ページのファイル情報を作成
                var blankFileInfo = new PdfFileInfo
                {
                    FileName = $"blank_page_{DateTime.Now.Ticks}.pdf", // ユニークな名前
                    FileData = Convert.FromBase64String(blankPageData),
                    CoverThumbnail = blankThumbnail,
                    AllThumbnails = new List<string> { blankThumbnail },
                    AllPageData = new List<string> { blankPageData },
                    PageCount = 1,
                    IsFullyLoaded = true
                };

                if (isPageView)
                {
                    // ページ単位表示：pageItemsに挿入
                    Console.WriteLine("Inserting blank page in page view mode");
                    var pageInfo = new PageInfo
                    {
                        FileId = blankFileInfo.FileName,
                        FileName = blankFileInfo.FileName,
                        PageIndex = 0,
                        Thumbnail = blankThumbnail,
                        PageData = blankPageData,
                        IsLoading = false,
                        HasError = false
                    };
                    
                    if (safePosition <= pageItems.Count)
                    {
                        pageItems.Insert(safePosition, pageInfo);
                        Console.WriteLine($"Inserted blank page at position {safePosition}");
                    }
                    else
                    {
                        pageItems.Add(pageInfo);
                        Console.WriteLine($"Added blank page at end (position was out of bounds)");
                    }
                    
                    // ファイル単位表示への切り替えのためにpdfFilesにも追加
                    pdfFiles.Add(blankFileInfo);
                }
                else
                {
                    // ファイル単位表示：pdfFilesに挿入
                    Console.WriteLine("Inserting blank page in file view mode");
                    
                    var filePosition = Math.Min(safePosition, pdfFiles.Count);
                    pdfFiles.Insert(filePosition, blankFileInfo);
                    Console.WriteLine($"Inserted blank file at position {filePosition}");
                }

                Console.WriteLine($"Blank page inserted successfully");
                StateHasChanged();

                // Sortableを再初期化
                await Task.Delay(100);
                await InitializeSortableAfterLoad();
            }
            else
            {
                Console.WriteLine("Failed to generate blank page data");
                errorMessage = "空白ページの生成に失敗しました";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inserting blank page: {ex.Message}");
            errorMessage = $"空白ページの挿入に失敗しました: {ex.Message}";
        }
        finally
        {
            showInsertMenuIndex = -1; // メニューを閉じる
        }
    }

    // PDF挿入用のファイル選択
    private async Task InsertPdfAtPosition(int position)
    {
        insertPosition = position;
        showInsertMenuIndex = -1; // メニューを閉じる
        await JSRuntime.InvokeVoidAsync("openFileDialog", "insertFileInput");
    }

    // PDF挿入用のファイル処理
    private async Task HandleInsertFileSelectionAsync(InputFileChangeEventArgs e)
    {
        if (insertPosition == -1) return;

        Console.WriteLine($"HandleInsertFileSelectionAsync called with insertPosition: {insertPosition}");
        Console.WriteLine($"Current mode - isPageView: {isPageView}");
        Console.WriteLine($"Current counts - pageThumbnails: {pageThumbnails?.Count}, pdfFiles: {pdfFiles.Count}, pageItems: {pageItems.Count}");

        const long maxFileSize = 52428800; // 50MB

        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                Console.WriteLine($"Processing insert file: {file.Name}");
                
                using var stream = file.OpenReadStream(maxFileSize);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);

                var pdfData = memoryStream.ToArray();
                Console.WriteLine($"File data size: {pdfData.Length} bytes");
                
                // pdfDataListにも追加（互換性のため）
                pdfDataList.Add(pdfData);

                // 高速読み込み：表紙サムネイルとページ数のみ取得
                Console.WriteLine($"Calling renderFirstPDFPage for {file.Name} (fast loading)");
                var coverThumbnail = await JSRuntime.InvokeAsync<string>("renderFirstPDFPage", pdfData);
                var pageCount = await JSRuntime.InvokeAsync<int>("getPDFPageCount", pdfData);
                
                if (coverThumbnail != null && pageCount > 0)
                {
                    Console.WriteLine($"Generated cover thumbnail for {file.Name}, total pages: {pageCount}");

                    // 新しいファイル構造にデータを格納
                    var pdfFileInfo = new PdfFileInfo
                    {
                        FileName = file.Name,
                        FileData = pdfData,
                        CoverThumbnail = coverThumbnail,
                        AllThumbnails = new List<string>(), // 遅延読み込み
                        AllPageData = new List<string>(), // 遅延読み込み
                        PageCount = pageCount,
                        IsFullyLoaded = false // まだ全ページは読み込まれていない
                    };

                    // 挿入位置を検証
                    var currentCount = pageThumbnails?.Count ?? 0;
                    var safeInsertPosition = Math.Min(insertPosition, currentCount);
                    
                    Console.WriteLine($"Insert position: {insertPosition}, Safe position: {safeInsertPosition}, Current count: {currentCount}");

                    if (isPageView)
                    {
                        // ページ単位表示：プログレッシブローディングでページを挿入
                        Console.WriteLine("Inserting in page view mode with progressive loading");
                        
                        // Phase 1: プレースホルダーを先に作成して挿入
                        var insertedPages = new List<PageInfo>();
                        for (int i = 0; i < pageCount; i++)
                        {
                            var pageInfo = new PageInfo
                            {
                                FileId = file.Name,
                                FileName = file.Name,
                                PageIndex = i,
                                Thumbnail = "", // 空のサムネイル
                                PageData = "",
                                IsLoading = true, // ローディング中
                                HasError = false
                            };
                            
                            // 表紙がある場合は即座に表示
                            if (i == 0 && !string.IsNullOrEmpty(coverThumbnail))
                            {
                                pageInfo.Thumbnail = coverThumbnail;
                                pageInfo.IsLoading = false;
                            }
                            
                            insertedPages.Add(pageInfo);
                            
                            var actualPosition = safeInsertPosition + i;
                            if (actualPosition <= pageItems.Count)
                            {
                                pageItems.Insert(actualPosition, pageInfo);
                                Console.WriteLine($"Inserted placeholder page {i} at position {actualPosition}");
                            }
                            else
                            {
                                pageItems.Add(pageInfo);
                                Console.WriteLine($"Added placeholder page {i} at end (position was out of bounds)");
                            }
                        }
                        
                        StateHasChanged(); // プレースホルダーを表示
                        
                        // Phase 2: バックグラウンドで全ページを読み込み、順次更新
                        _ = Task.Run(async () =>
                        {
                            try
                            {
                                await LoadPagesForInsertedFileAsync(pdfFileInfo, safeInsertPosition);
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine($"Error loading pages for inserted file {file.Name}: {ex.Message}");
                                await SetPagesError(safeInsertPosition, pageCount);
                            }
                        });
                        
                        // 両方のリストにファイルを追加（ファイル単位切り替えのため）
                        pdfFiles.Add(pdfFileInfo);
                    }
                    else
                    {
                        // ファイル単位表示：ファイルを挿入
                        Console.WriteLine("Inserting in file view mode");
                        
                        // ファイル挿入位置を計算（ファイル単位での位置）
                        var fileInsertPosition = Math.Min(safeInsertPosition, pdfFiles.Count);
                        pdfFiles.Insert(fileInsertPosition, pdfFileInfo);
                        Console.WriteLine($"Inserted file at position {fileInsertPosition}");
                    }

                    Console.WriteLine($"Successfully initiated insertion of {pageCount} pages from {file.Name}");
                    StateHasChanged();

                    // Sortableを再初期化
                    await Task.Delay(100);
                    await InitializeSortableAfterLoad();
                }
                else
                {
                    Console.WriteLine($"Fast loading failed for {file.Name}, falling back to full loading");
                    // フォールバック：従来の全ページ読み込み
                    var newThumbnails = await JSRuntime.InvokeAsync<List<string>>("renderPDFPages", pdfData);
                    var pageDataList = await JSRuntime.InvokeAsync<List<string>>("extractPDFPages", pdfData);

                    if (newThumbnails != null && pageDataList != null && newThumbnails.Count > 0)
                    {
                        var pdfFileInfo = new PdfFileInfo
                        {
                            FileName = file.Name,
                            FileData = pdfData,
                            CoverThumbnail = newThumbnails[0],
                            AllThumbnails = newThumbnails,
                            AllPageData = pageDataList,
                            PageCount = newThumbnails.Count,
                            IsFullyLoaded = true
                        };

                        var currentCount = pageThumbnails?.Count ?? 0;
                        var safeInsertPosition = Math.Min(insertPosition, currentCount);

                        if (isPageView)
                        {
                            // ページ単位表示：従来の方法で挿入
                            for (int i = 0; i < newThumbnails.Count; i++)
                            {
                                var pageInfo = new PageInfo
                                {
                                    FileId = file.Name,
                                    FileName = file.Name,
                                    PageIndex = i,
                                    Thumbnail = newThumbnails[i],
                                    PageData = i < pageDataList.Count ? pageDataList[i] : "",
                                    IsLoading = false,
                                    HasError = false
                                };
                                
                                var actualPosition = safeInsertPosition + i;
                                if (actualPosition <= pageItems.Count)
                                {
                                    pageItems.Insert(actualPosition, pageInfo);
                                }
                                else
                                {
                                    pageItems.Add(pageInfo);
                                }
                            }
                            
                            // ファイル単位切り替えのためにpdfFilesにも追加
                            pdfFiles.Add(pdfFileInfo);
                        }
                        else
                        {
                            // ファイル単位表示：ファイルを挿入
                            var fileInsertPosition = Math.Min(safeInsertPosition, pdfFiles.Count);
                            pdfFiles.Insert(fileInsertPosition, pdfFileInfo);
                        }

                        StateHasChanged();
                        await Task.Delay(100);
                        await InitializeSortableAfterLoad();
                    }
                    else
                    {
                        Console.WriteLine($"Failed to generate thumbnails or page data for {file.Name}");
                        errorMessage = $"サムネイルまたはページデータの生成に失敗しました: {file.Name}";
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error inserting PDF {file.Name}: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                errorMessage = $"PDFの挿入に失敗しました: {file.Name} - {ex.Message}";
            }
        }

        insertPosition = -1; // リセット
        Console.WriteLine("HandleInsertFileSelectionAsync completed");
    }
    
    // 挿入されたファイルのページを非同期で読み込み
    private async Task LoadPagesForInsertedFileAsync(PdfFileInfo file, int startIndex)
    {
        try
        {
            Console.WriteLine($"LoadPagesForInsertedFileAsync started for {file.FileName}, startIndex: {startIndex}");
            
            // 全ページサムネイルを読み込み
            await LoadAllPagesForFile(file);
            
            if (file.IsFullyLoaded && file.AllThumbnails.Count > 0)
            {
                // 各ページのサムネイルを順次更新
                for (int i = 0; i < file.AllThumbnails.Count; i++)
                {
                    var pageIndex = startIndex + i;
                    if (pageIndex < pageItems.Count)
                    {
                        await UpdatePageThumbnail(pageIndex, file.AllThumbnails[i], 
                            i < file.AllPageData.Count ? file.AllPageData[i] : "");
                        await Task.Delay(100); // 順次表示効果
                    }
                }
            }
            else
            {
                Console.WriteLine($"Failed to load thumbnails for inserted file {file.FileName}");
                await SetPagesError(startIndex, file.PageCount);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading pages for inserted file {file.FileName}: {ex.Message}");
            await SetPagesError(startIndex, file.PageCount);
        }
    }
}