@page "/edit/page/{FileId}/{PageIndex:int}"
@using NoCloudPdf.Models
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using NoCloudPdf.Services
@using System.Text.Json
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject PdfDataService PdfDataService

<div class="edit-page-container h-screen flex flex-col">
    <!-- ヘッダー -->
    <div class="bg-white shadow-sm border-b px-4 py-3 flex items-center justify-between">
        <div class="flex items-center gap-4">
            <button @onclick="NavigateBack" class="text-gray-600 hover:text-gray-800">
                <i class="fa-solid fa-arrow-left text-xl"></i>
            </button>
            <h1 class="text-lg font-semibold">ページ編集</h1>
            @if (!string.IsNullOrEmpty(fileName))
            {
                <span class="text-sm text-gray-500">@fileName - ページ @(PageIndex + 1)</span>
            }
        </div>
        <div class="flex items-center gap-3">
            <button @onclick="SaveChanges" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                保存
            </button>
        </div>
    </div>

    <!-- ツールバー -->
    <div class="bg-gray-50 border-b px-4 py-2 flex items-center gap-4">
        <!-- ズーム -->
        <div class="flex items-center gap-2">
            <button @onclick="ZoomOut" class="p-2 hover:bg-gray-200 rounded">
                <i class="fa-solid fa-minus"></i>
            </button>
            <span class="text-sm font-medium w-16 text-center">@((int)(zoomLevel * 100))%</span>
            <button @onclick="ZoomIn" class="p-2 hover:bg-gray-200 rounded">
                <i class="fa-solid fa-plus"></i>
            </button>
            <button @onclick="FitToScreen" class="px-3 py-1 text-sm bg-gray-200 hover:bg-gray-300 rounded">
                画面に合わせる
            </button>
        </div>

        <div class="h-6 w-px bg-gray-300"></div>

        <!-- ツール選択 -->
        <div class="flex items-center gap-2">
            <button @onclick="() => SetTool(EditTool.Select)"
                class="p-2 rounded @(currentTool == EditTool.Select ? "bg-blue-100 text-blue-600" : "hover:bg-gray-200")">
                <i class="fa-solid fa-mouse-pointer"></i>
            </button>
            <button @onclick="() => SetTool(EditTool.Text)"
                class="p-2 rounded @(currentTool == EditTool.Text ? "bg-blue-100 text-blue-600" : "hover:bg-gray-200")">
                <i class="fa-solid fa-font"></i>
            </button>
            <button @onclick="() => SetTool(EditTool.Image)"
                class="p-2 rounded @(currentTool == EditTool.Image ? "bg-blue-100 text-blue-600" : "hover:bg-gray-200")">
                <i class="fa-solid fa-image"></i>
            </button>
        </div>

        @if (currentTool == EditTool.Text)
        {
            <div class="h-6 w-px bg-gray-300"></div>
            <div class="flex items-center gap-2">
                <select class="text-sm border rounded px-2 py-1 w-20 focus:ring-2 focus:ring-blue-200 focus:border-blue-400"
                    value="@(editElements.FirstOrDefault(el => el.IsEditing)?.FontSize ?? fontSize)"
                    @onchange="OnFontSizeChanged" @onmousedown="() => ignoreTextBlur = true">
                    <option value="10">10px</option>
                    <option value="11">11px</option>
                    <option value="12">12px</option>
                    <option value="13">13px</option>
                    <option value="14">14px</option>
                    <option value="15">15px</option>
                    <option value="16">16px</option>
                    <option value="18">18px</option>
                    <option value="20">20px</option>
                    <option value="22">22px</option>
                    <option value="24">24px</option>
                    <option value="28">28px</option>
                    <option value="32">32px</option>
                    <option value="36">36px</option>
                    <option value="40">40px</option>
                    <option value="48">48px</option>
                    <option value="56">56px</option>
                    <option value="64">64px</option>
                </select>
                <input type="number" min="6" max="128" step="1"
                    class="text-sm border rounded px-2 py-1 w-16 focus:ring-2 focus:ring-blue-200 focus:border-blue-400"
                    value="@(editElements.FirstOrDefault(el => el.IsEditing)?.FontSize ?? fontSize)"
                    @onchange="OnFontSizeChanged" @onmousedown="() => ignoreTextBlur = true" placeholder="手入力" />
                <span class="text-xs text-gray-500">px</span>

                <select class="text-sm border rounded px-2 py-1 w-28 focus:ring-2 focus:ring-blue-200 focus:border-blue-400"
                    value="@(editElements.FirstOrDefault(el => el.IsEditing)?.FontFamily ?? fontFamily)"
                    @onchange="OnFontFamilyChanged" @onmousedown="() => ignoreTextBlur = true">
                    <option value="sans-serif">標準（ゴシック）</option>
                    <option value="serif">明朝体</option>
                    <option value="monospace">等幅</option>
                    <option value="Arial, Helvetica, sans-serif">Arial</option>
                    <option value="Times New Roman, serif">Times New Roman</option>
                    <option value="Meiryo, sans-serif">メイリオ</option>
                    <option value="Yu Gothic, sans-serif">游ゴシック</option>
                </select>
                <input type="color"
                    class="w-8 h-8 border rounded focus:ring-2 focus:ring-blue-200 focus:border-blue-400"
                    value="@CurrentTextColor"
                    @oninput="OnTextColorInput"
                    @onfocus="() => ignoreNextPageClick = true"
                    @onblur="OnColorPickerBlur"
                    @onclick:stopPropagation @onmousedown="() => ignoreTextBlur = true"/>
            </div>
        }
        @if (currentTool == EditTool.Image)
        {
            <label class="flex items-center gap-1 text-sm">
                <input type="checkbox" @bind="keepAspectRatio" />
                アスペクト比固定
            </label>
            <button class="px-3 py-1 bg-gray-200 text-gray-800 rounded hover:bg-gray-300"
                    @onclick="TriggerImageInput">
                画像を追加
            </button>
        }
    </div>

    <!-- メインエディタエリア -->
    <div class="edit-canvas-container h-full w-[100vw] md:w-[calc(100vw-70px)] min-w-0 overflow-auto flex justify-center items-start
    @(currentTool == EditTool.Text ? " cursor-text" : "")"
    @onmousedown="OnCanvasMouseDown" @onmouseup="OnElementMouseUp" @onmousemove="OnElementMouseMove">
                <!-- PDF ページ -->
                <div class="pdf-page bg-white shadow-lg relative"
                    style="width:@(pageWidth * zoomLevel)px; height:@(pageHeight * zoomLevel)px; transform: scale(1); transform-origin: center center;"
                    @onclick="OnPageClick">
                    <canvas id="pdf-canvas-@safeFileId-@PageIndex"
                            width="@(pageWidth)"
                            height="@(pageHeight)"
                            style="width:@(pageWidth * zoomLevel)px; height:@(pageHeight * zoomLevel)px;"
                            class="absolute inset-0"></canvas>

                    <!-- 編集要素 -->
                    @foreach (var element in editElements)
                    {
                        @if (element.Type == ElementType.Text)
                        {
                            <div class="edit-element text-element absolute cursor-move select-none
                                @(element.IsEditing
                                    ? "border-2 border-blue-600 bg-blue-50"
                                    : (selectedElementIds.Contains(element.Id)
                                        ? "border-2 border-blue-600"
                                        : "border-2 border-transparent"))"
                                style="
                                    left: @(element.X * zoomLevel)px;
                                    top: @(element.Y * zoomLevel)px;
                                    width: @(element.Width * zoomLevel)px;
                                    font-size: @(element.FontSize * zoomLevel)px;
                                    color: @element.Color;
                                    font-family: @(element.FontFamily);"
                                @onmousedown="(e) => OnElementMouseDown(e, element)"
                                @onmouseup="OnElementMouseUp"
                                >
                                @if (element.IsEditing)
                                {
                                    <textarea
                                        id="text-area-@element.Id"
                                        name="text-area-@element.Id"
                                        @bind="element.Text"
                                        @oninput="(e) => OnTextAreaInput(e, element)"
                                        @onblur="() => FinishTextEdit(element)"
                                        class="border-none outline-none bg-transparent resize-none overflow-hidden"
                                        style="width: 100%; font-size: @(element.FontSize * zoomLevel)px; line-height: @(element.FontSize * zoomLevel)px; padding: 0; margin: 0; box-sizing: border-box; display: block; color: @element.Color;"
                                        @ref="textInputRef"
                                        @onclick:stopPropagation
                                        @onmousedown:stopPropagation
                                    />
                                }
                                else
                                {
                                    <span
                                        @onclick="() => { if (!element.IsEditing) SelectElement(element.Id); }"
                                        @ondblclick="() => StartTextEdit(element)"
                                        @onclick:stopPropagation
                                        @ondblclick:stopPropagation
                                        style="
                                            width: 100%;
                                            font-size: @(element.FontSize * zoomLevel)px;
                                            line-height: @(element.FontSize * zoomLevel)px;
                                            padding: 0;
                                            margin: 0;
                                            border: none;
                                            box-sizing: border-box;
                                            display: block;
                                            vertical-align: middle;
                                            color: @element.Color;"
                                    >
                                        @((MarkupString)element.Text.Replace("\n", "<br />"))
                                    </span>
                                }
                                @if (selectedElementIds.Contains(element.Id) && !element.IsEditing)
                                {
                                    <div class="element-handles absolute inset-[-4px] pointer-events-none">
                                        <div class="handle handle-nw absolute w-2 h-2 bg-blue-600 border border-white pointer-events-auto cursor-nw-resize top-[-4px] left-[-4px]"
                                            @onmousedown="@(e => OnTextResizeMouseDown(e, element, "nw"))" @onmousedown:stopPropagation></div>
                                        <div class="handle handle-ne absolute w-2 h-2 bg-blue-600 border border-white pointer-events-auto cursor-ne-resize top-[-4px] right-[-4px]"
                                            @onmousedown="@(e => OnTextResizeMouseDown(e, element, "ne"))" @onmousedown:stopPropagation></div>
                                        <div class="handle handle-sw absolute w-2 h-2 bg-blue-600 border border-white pointer-events-auto cursor-sw-resize bottom-[-4px] left-[-4px]"
                                            @onmousedown="@(e => OnTextResizeMouseDown(e, element, "sw"))" @onmousedown:stopPropagation></div>
                                        <div class="handle handle-se absolute w-2 h-2 bg-blue-600 border border-white pointer-events-auto cursor-se-resize bottom-[-4px] right-[-4px]"
                                            @onmousedown="@(e => OnTextResizeMouseDown(e, element, "se"))" @onmousedown:stopPropagation></div>
                                        @if (!element.IsEditing)
                                        {
                                            @if (currentTool == EditTool.Text)
                                            {
                                                <button class="edit-btn absolute top-[-20px] right-[35px] w-5 h-5 bg-blue-600 text-white border-none rounded-full cursor-pointer pointer-events-auto flex items-center justify-center text-xs z-20 hover:bg-blue-700"
                                                    @onclick="() => StartTextEdit(element)" @onclick:stopPropagation title="テキスト編集">
                                                    <i class="fa-solid fa-pen"></i>
                                                </button>
                                            }
                                        }
                                        <button class="delete-btn absolute top-[-20px] right-[10px] w-5 h-5 bg-red-500 text-white border-none rounded-full cursor-pointer pointer-events-auto flex items-center justify-center text-xs hover:bg-red-600"
                                            @onclick="() => DeleteElement(element.Id)" @onclick:stopPropagation title="削除">
                                            <i class="fa-solid fa-times"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                        else if (element.Type == ElementType.Image)
                        {
                            <div class="edit-element image-element absolute select-none cursor-move
                                @(selectedElementIds.Contains(element.Id) ? "border-2 border-blue-600" : "border-2 border-transparent")"
                                style="
                                    left: @(element.X * zoomLevel)px;
                                    top: @(element.Y * zoomLevel)px;
                                    width: @(element.Width * zoomLevel)px;
                                    height: @(element.Height * zoomLevel)px;"
                                @onmousedown="(e) => OnImageMouseDown(e, element)"
                                @onmouseup="OnImageMouseUp"
                                @onclick="() => { if (currentTool == EditTool.Image) SelectElement(element.Id); }"
                                @onclick:stopPropagation
                            >
                                <img src="@element.ImageUrl" class="w-full h-full object-contain pointer-events-none" style="object-fit:@(keepAspectRatio ? "contain" : "fill");" />
                                @if (selectedElementIds.Contains(element.Id) && currentTool == EditTool.Image)
                                {
                                    <div class="element-handles absolute inset-0 pointer-events-none">
                                        @foreach (var handle in new[] { "nw", "n", "ne", "e", "se", "s", "sw", "w" })
                                        {
                                            <div class="handle handle-@handle absolute bg-blue-600 border border-white w-2 h-2 pointer-events-auto"
                                                style="@GetHandleStyle(handle, element)"
                                                @onmousedown="(e) => OnImageResizeMouseDown(e, element, handle)"
                                                @onmousedown:stopPropagation />
                                        }
                                    </div>
                                }
                                @if (selectedElementIds.Contains(element.Id))
                                {
                                    <button class="delete-btn absolute top-[-20px] right-[-20px] w-5 h-5 bg-red-500 text-white border-none rounded-full cursor-pointer pointer-events-auto flex items-center justify-center text-xs hover:bg-red-600"
                                            @onclick="() => DeleteElement(element.Id)" @onclick:stopPropagation title="削除">
                                        <i class="fa-solid fa-times"></i>
                                    </button>
                                }
                            </div>
                        }
                    }
                </div>
        
    </div>

    <!-- ファイルアップロード用の隠しinput -->
   <input type="file" @ref="fileInputRef" @onchange="OnImageSelected" accept="image/*" style="display: none;" />
</div>


@code {
    private DotNetObjectReference<EditPage>? _dotNetRef;
    private PageSourceInfo? cachedPageSource;

    [Parameter] public string FileId { get; set; } = "";
    [Parameter] public int PageIndex { get; set; }
    // 例: FileIdをピリオドなしに変換(cssセレクタでピリオドがクラス名として解釈されるため)
    private string GetSafeId(string fileId) =>
    fileId.Replace(".", "_").Replace("/", "_").Replace("\\", "_");

    private string safeFileId = "";
    protected override void OnParametersSet()
    {
        safeFileId = GetSafeId(FileId);
    }
    private string fileName = "";
    private int pageWidth = 595;
    private int pageHeight = 842;
    private double zoomLevel = 1.0;
    private double offsetX = 0;
    private double offsetY = 0;

    private string? draggingElementId = null;
    private double dragStartMouseX = 0;
    private double dragStartMouseY = 0;
    private double dragStartElementX = 0;
    private double dragStartElementY = 0;

    private string? draggingImageId = null;
    private string? resizingImageId = null;
    private string? resizingHandle = null;
    private double dragStartImageX, dragStartImageY;
    private double dragStartImageWidth, dragStartImageHeight;

    private EditTool currentTool = EditTool.Select;
    private bool isDragging = false;
    private double lastMouseX = 0;
    private double lastMouseY = 0;

    private bool ignoreNextPageClick = false;
    private bool ignoreTextBlur = false;

    // 選択された要素のIDリスト
    private List<string> selectedElementIds = new();

    private string fontFamily = "sans-serif";
    private async Task OnTextAreaInput(ChangeEventArgs e, EditElement element)
    {
        element.Text = e.Value?.ToString() ?? "";
        // 最大行幅を取得
        var maxLineWidth = await JS.InvokeAsync<double>(
            "measureMaxLineWidth",
            element.Text,
            element.FontSize * zoomLevel,
            element.FontFamily
        );
        element.Width = (maxLineWidth / zoomLevel) + (element.FontSize * 0.5); // 余白分はfontSizeに比例
        await JS.InvokeVoidAsync("autoResizeTextarea", textInputRef);
        StateHasChanged();
    }
    private void OnFontFamilyChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? "sans-serif";
        var editingElement = editElements.FirstOrDefault(el => el.IsEditing);
        if (editingElement != null)
        {
            editingElement.FontFamily = value;
        }
        else if (selectedElementIds.Count > 0)
        {
            foreach (var el in editElements.Where(el => selectedElementIds.Contains(el.Id)))
                el.FontFamily = value;
        }
        else
        {
            fontFamily = value;
        }
        StateHasChanged();
    }
    private List<EditElement> editElements = new();

    private ElementReference textInputRef;
    private ElementReference fileInputRef;

    private enum EditTool { Select, Text, Image }
    private enum ElementType { Text, Image }

    private class EditElement
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public ElementType Type { get; set; }
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; } = 100;
        public double Height { get; set; } = 20;
        public string Text { get; set; } = "";
        public int FontSize { get; set; } = DefaultFontSize;
        public string Color { get; set; } = "#000000";
        public string ImageUrl { get; set; } = "";
        public bool IsEditing { get; set; } = false;
        public string FontFamily { get; set; } = DefaultFontFamily;
        public double ImageOriginalWidth { get; set; }
        public double ImageOriginalHeight { get; set; }
    }

    private string _textColor = "#000000";
    private string textColor
    {
        get => _textColor;
        set
        {
            _textColor = value;

            // 編集中の要素があればそれだけ
            var editingElement = editElements.FirstOrDefault(el => el.IsEditing);
            if (editingElement != null)
            {
                editingElement.Color = value;
            }
            // 選択中なら全て
            else if (selectedElementIds.Count > 0)
            {
                foreach (var el in editElements.Where(el => selectedElementIds.Contains(el.Id)))
                    el.Color = value;
            }
            StateHasChanged();
        }
    }

    private void OnColorPickerBlur(FocusEventArgs e)
    {
        ignoreNextPageClick = true;
    }

    private void OnTextColorInput(ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? "#000000";
        textColor = value; // setterで編集中・選択中要素にも反映される
    }

    private string CurrentTextColor
    {
        get
        {
            var editingElement = editElements.FirstOrDefault(el => el.IsEditing);
            if (editingElement != null)
                return editingElement.Color;
            else if (selectedElementIds.Count > 0)
            {
                var selected = editElements.FirstOrDefault(el => selectedElementIds.Contains(el.Id));
                if (selected != null)
                    return selected.Color;
            }
            return textColor;
        }
        set
        {
            textColor = value;
        }
    }

    private const int DefaultFontSize = 16;
    private const string DefaultFontFamily = "sans-serif";
    private int _fontSize = DefaultFontSize;
    private void ResetFontToDefault()
    {
        _fontSize = DefaultFontSize;
        fontFamily = DefaultFontFamily;
        StateHasChanged();
    }
    private int fontSize
    {
        get => _fontSize;
        set
        {
            _fontSize = value;
            var editingElement = editElements.FirstOrDefault(el => el.IsEditing);
            if (editingElement != null)
            {
                editingElement.FontSize = value;
            }
        }
    }

    // テキストリサイズ用フィールド/定数 ---
    private string? resizingTextId = null;
    private string? resizingTextHandle = null;
    private double dragStartTextMouseX = 0;
    private double dragStartTextMouseY = 0;
    private int dragStartTextFontSize = DefaultFontSize;
    private double anchorX, anchorY; // ページ座標で保持
    private double anchorFontSize;
    private double anchorOppositeX, anchorOppositeY; // 対角基点の座標（ページ座標）

    // ピクセル移動何pxでフォントサイズを1pt変えるか（調整可）
    private const double TextFontResizePixelsPerPoint = 4.0;

    private async void OnElementMouseMove(MouseEventArgs e)
    {
        bool changed = false;

        // テキストリサイズ中
        if (resizingTextId != null && resizingTextHandle != null)
        {
            var element = editElements.FirstOrDefault(el => el.Id == resizingTextId);
            if (element != null)
            {
                // 画面座標 → キャンバス座標に変換
                var canvasRect = await JS.InvokeAsync<RectDto>("getElementRect", $"#pdf-canvas-{safeFileId}-{PageIndex}");
                var mouseCanvasX = (e.ClientX - canvasRect.left) / zoomLevel;
                var mouseCanvasY = (e.ClientY - canvasRect.top) / zoomLevel;

                double newX = element.X;
                double newY = element.Y;
                double newWidth = element.Width;
                double newHeight = element.Height;
                int newFontSize = element.FontSize;

                switch (resizingTextHandle)
                {
                    case "nw":
                        // 右下基点（anchorX, anchorY固定）
                        newWidth = anchorX - mouseCanvasX;
                        newHeight = anchorY - mouseCanvasY;
                        newFontSize = Math.Max(6, (int)Math.Round(newHeight));
                        // JSで最大行幅を取得
                        var maxLineWidthNW = await JS.InvokeAsync<double>(
                            "measureMaxLineWidth",
                            element.Text,
                            newFontSize * zoomLevel,
                            element.FontFamily
                        );
                        newWidth = (maxLineWidthNW / zoomLevel) + (newFontSize * 0.5);
                        // 右端(anchorX)を絶対固定
                        newX = anchorX - newWidth;
                        newY = anchorY - newHeight;
                        break;

                    case "sw":
                        // 右上基点（anchorX, anchorY固定）
                        newWidth = anchorX - mouseCanvasX;
                        newHeight = mouseCanvasY - anchorY;
                        newFontSize = Math.Max(6, (int)Math.Round(newHeight));
                        var maxLineWidthSW = await JS.InvokeAsync<double>(
                            "measureMaxLineWidth",
                            element.Text,
                            newFontSize * zoomLevel,
                            element.FontFamily
                        );
                        newWidth = (maxLineWidthSW / zoomLevel) + (newFontSize * 0.5);
                        // 右端(anchorX)を絶対固定
                        newX = anchorX - newWidth;
                        newY = anchorY;
                        break;

                    case "ne":
                        // 左下基点（anchorX, anchorY固定）
                        newWidth = mouseCanvasX - anchorX;
                        newHeight = anchorY - mouseCanvasY;
                        newFontSize = Math.Max(6, (int)Math.Round(newHeight));
                        var maxLineWidthNE = await JS.InvokeAsync<double>(
                            "measureMaxLineWidth",
                            element.Text,
                            newFontSize * zoomLevel,
                            element.FontFamily
                        );
                        newWidth = (maxLineWidthNE / zoomLevel) + (newFontSize * 0.5);
                        // 左端(anchorX)を絶対固定
                        newX = anchorX;
                        newY = anchorY - newHeight;
                        break;

                    case "se":
                        // 左上基点（anchorX, anchorY固定）
                        newWidth = mouseCanvasX - anchorX;
                        newHeight = mouseCanvasY - anchorY;
                        newFontSize = Math.Max(6, (int)Math.Round(newHeight));
                        var maxLineWidthSE = await JS.InvokeAsync<double>(
                            "measureMaxLineWidth",
                            element.Text,
                            newFontSize * zoomLevel,
                            element.FontFamily
                        );
                        newWidth = (maxLineWidthSE / zoomLevel) + (newFontSize * 0.5);
                        // 左端(anchorX)を絶対固定
                        newX = anchorX;
                        newY = anchorY;
                        break;
                }

                newWidth = Math.Max(newWidth, 6);
                newHeight = Math.Max(newHeight, 6);

                // 反映
                element.X = newX;
                element.Y = newY;
                element.Width = newWidth;
                element.Height = newHeight;
                element.FontSize = newFontSize;
                fontSize = newFontSize;

                changed = true;
            }
            if (changed) StateHasChanged();
            return;
        }
    }

    // テキストハンドル押下でリサイズを開始
    private void OnTextResizeMouseDown(MouseEventArgs e, EditElement element, string handle)
    {
        resizingTextId = element.Id;
        resizingTextHandle = handle;
        dragStartTextMouseX = e.ClientX;
        dragStartTextMouseY = e.ClientY;
        dragStartTextFontSize = element.FontSize;

        // ページ座標で基点を記録（element.X, element.Y, element.Width, element.Heightはページ座標）
        switch (handle)
        {
            case "nw": // 右下が基点
                anchorX = element.X + element.Width;
                anchorY = element.Y + element.Height;
                break;
            case "ne": // 左下が基点
                anchorX = element.X;
                anchorY = element.Y + element.Height;
                break;
            case "sw": // 右上が基点
                anchorX = element.X + element.Width;
                anchorY = element.Y;
                break;
            case "se": // 左上が基点
                anchorX = element.X;
                anchorY = element.Y;
                break;
        }
        anchorFontSize = element.FontSize;
        draggingElementId = null;
        isDragging = true;
    }
    
    // マウスアップ時にリサイズを終了
    private void OnElementMouseUp(MouseEventArgs e)
    {
        draggingElementId = null;
        // テキストリサイズ終了
        resizingTextId = null;
        resizingTextHandle = null;
    
        // 既存: 画像イベントも解除
        draggingImageId = null;
        resizingImageId = null;
        resizingHandle = null;
        isDragging = false;
        StateHasChanged();
    }
    
    // ...existing code...

    private string GetHandleStyle(string handle, EditElement element)
    {
        var w = element.Width * zoomLevel;
        var h = element.Height * zoomLevel;
        var positions = new Dictionary<string, string>
        {
            ["nw"] = "top:-4px;left:-4px;cursor:nw-resize;",
            ["n"]  = $"top:-4px;left:{w/2-4}px;cursor:n-resize;",
            ["ne"] = $"top:-4px;right:-4px;cursor:ne-resize;",
            ["e"]  = $"top:{h/2-4}px;right:-4px;cursor:e-resize;",
            ["se"] = $"bottom:-4px;right:-4px;cursor:se-resize;",
            ["s"]  = $"bottom:-4px;left:{w/2-4}px;cursor:s-resize;",
            ["sw"] = $"bottom:-4px;left:-4px;cursor:sw-resize;",
            ["w"]  = $"top:{h/2-4}px;left:-4px;cursor:w-resize;"
        };
        return positions[handle] + "position:absolute;width:8px;height:8px;z-index:10;";
    }

    private void OnElementMouseDown(MouseEventArgs e, EditElement element)
    {
        if (element.Type != ElementType.Text || !selectedElementIds.Contains(element.Id)) return;
        draggingElementId = element.Id;
        dragStartMouseX = e.ClientX;
        dragStartMouseY = e.ClientY;
        dragStartElementX = element.X;
        dragStartElementY = element.Y;
    }

    private async void OnFontSizeChanged(ChangeEventArgs e)
    {
        int value;
        if (!int.TryParse(e.Value?.ToString(), out value))
        {
            value = DefaultFontSize;
        }
        var editingElement = editElements.FirstOrDefault(el => el.IsEditing);
        if (editingElement != null)
        {
            editingElement.FontSize = value;
            // measureMaxLineWidthで幅を再計算
            var maxLineWidth = await JS.InvokeAsync<double>(
                "measureMaxLineWidth",
                editingElement.Text,
                editingElement.FontSize * zoomLevel,
                editingElement.FontFamily
            );
            editingElement.Width = (maxLineWidth / zoomLevel) + (editingElement.FontSize * 0.5);
        }
        else if (selectedElementIds.Count > 0)
        {
            foreach (var el in editElements.Where(el => selectedElementIds.Contains(el.Id)))
            {
                el.FontSize = value;
                var maxLineWidth = await JS.InvokeAsync<double>(
                    "measureMaxLineWidth",
                    el.Text,
                    el.FontSize * zoomLevel,
                    el.FontFamily
                );
                el.Width = (maxLineWidth / zoomLevel) + (el.FontSize * 0.5);
            }
        }
        else
        {
            fontSize = value;
        }
        StateHasChanged();
    }

    private async void StartTextEdit(EditElement element)
    {
        foreach (var el in editElements)
            el.IsEditing = false;

        element.IsEditing = true;
        selectedElementIds.Clear();
        selectedElementIds.Add(element.Id);

        fontFamily = element.FontFamily;
        _fontSize = element.FontSize;

        StateHasChanged();
        await Task.Yield(); // レンダリング待ち

        try
        {
            await textInputRef.FocusAsync();
            await JS.InvokeVoidAsync("autoResizeTextarea", textInputRef); // ←ここで高さ調整
        }
        catch
        {
            // フォーカス失敗は無視
        }
    }

    private bool keepAspectRatio = true;

    private void OnImageMouseDown(MouseEventArgs e, EditElement element)
    {
        if (currentTool != EditTool.Image || !selectedElementIds.Contains(element.Id)) return;
        draggingImageId = element.Id;
        dragStartMouseX = e.ClientX;
        dragStartMouseY = e.ClientY;
        dragStartImageX = element.X;
        dragStartImageY = element.Y;
    }

    private void OnImageMouseMove(MouseEventArgs e)
    {
        bool changed = false;
        if (draggingImageId != null)
        {
            var element = editElements.FirstOrDefault(el => el.Id == draggingImageId);
            if (element == null) return;
            var dx = (e.ClientX - dragStartMouseX) / zoomLevel;
            var dy = (e.ClientY - dragStartMouseY) / zoomLevel;
            element.X = dragStartImageX + dx;
            element.Y = dragStartImageY + dy;
            changed = true;
        }
        else if (resizingImageId != null && resizingHandle != null)
        {
            var element = editElements.FirstOrDefault(el => el.Id == resizingImageId);
            if (element == null) return;
            var dx = (e.ClientX - dragStartMouseX) / zoomLevel;
            var dy = (e.ClientY - dragStartMouseY) / zoomLevel;
            ResizeImageElement(element, resizingHandle, dx, dy);
            changed = true;
        }
        if (changed) StateHasChanged();
    }

    private void OnImageMouseUp(MouseEventArgs e)
    {
        draggingImageId = null;
        resizingImageId = null;
        resizingHandle = null;
    }

    private void OnImageResizeMouseDown(MouseEventArgs e, EditElement element, string handle)
    {
        resizingImageId = element.Id;
        resizingHandle = handle;
        dragStartMouseX = e.ClientX;
        dragStartMouseY = e.ClientY;
        dragStartImageX = element.X;
        dragStartImageY = element.Y;
        dragStartImageWidth = element.Width;
        dragStartImageHeight = element.Height;
    }

    private void ResizeImageElement(EditElement element, string handle, double dx, double dy)
    {
        double minSize = 20;
        double aspect = element.ImageOriginalWidth > 0 && element.ImageOriginalHeight > 0
            ? element.ImageOriginalWidth / element.ImageOriginalHeight
            : 1.0;

        double newX = dragStartImageX;
        double newY = dragStartImageY;
        double newWidth = dragStartImageWidth;
        double newHeight = dragStartImageHeight;

        if (keepAspectRatio)
        {
            switch (handle)
            {
                case "n":
                    {
                        double rawHeight = dragStartImageHeight - dy;
                        newHeight = Math.Max(rawHeight, minSize);
                        double actualDy = dragStartImageHeight - newHeight;
                        newWidth = Math.Max(newHeight * aspect, minSize);
                        newY = dragStartImageY + actualDy;
                    }
                    break;
                case "s":
                    {
                        double rawHeight = dragStartImageHeight + dy;
                        newHeight = Math.Max(rawHeight, minSize);
                        newWidth = Math.Max(newHeight * aspect, minSize);
                    }
                    break;
                case "e":
                    {
                        double rawWidth = dragStartImageWidth + dx;
                        newWidth = Math.Max(rawWidth, minSize);
                        newHeight = Math.Max(newWidth / aspect, minSize);
                    }
                    break;
                case "w":
                    {
                        double rawWidth = dragStartImageWidth - dx;
                        newWidth = Math.Max(rawWidth, minSize);
                        double actualDx = dragStartImageWidth - newWidth;
                        newHeight = Math.Max(newWidth / aspect, minSize);
                        newX = dragStartImageX + actualDx;
                    }
                    break;
                case "nw":
                    {
                        // dx,dyのうち絶対値が大きい方を優先
                        double delta = Math.Abs(dx) > Math.Abs(dy) ? dx : dy;
                        double rawWidth = dragStartImageWidth - delta;
                        newWidth = Math.Max(rawWidth, minSize);
                        newHeight = Math.Max(newWidth / aspect, minSize);
                        double actualDelta = dragStartImageWidth - newWidth;
                        newX = dragStartImageX + actualDelta;
                        newY = dragStartImageY + (dragStartImageHeight - newHeight);
                    }
                    break;
                case "ne":
                    {
                        double delta = Math.Abs(dx) > Math.Abs(dy) ? -dx : dy;
                        double rawWidth = dragStartImageWidth + dx;
                        newWidth = Math.Max(rawWidth, minSize);
                        newHeight = Math.Max(newWidth / aspect, minSize);
                        newY = dragStartImageY + (dragStartImageHeight - newHeight);
                    }
                    break;
                case "se":
                    {
                        double delta = Math.Abs(dx) > Math.Abs(dy) ? dx : dy;
                        double rawWidth = dragStartImageWidth + delta;
                        newWidth = Math.Max(rawWidth, minSize);
                        newHeight = Math.Max(newWidth / aspect, minSize);
                    }
                    break;
                case "sw":
                    {
                        double delta = Math.Abs(dx) > Math.Abs(dy) ? dx : -dy;
                        double rawWidth = dragStartImageWidth - dx;
                        newWidth = Math.Max(rawWidth, minSize);
                        newHeight = Math.Max(newWidth / aspect, minSize);
                        double actualDx = dragStartImageWidth - newWidth;
                        newX = dragStartImageX + actualDx;
                    }
                    break;
            }
        }
        else
        {
            // アスペクト比無視（今のままでOK）
            switch (handle)
            {
                case "nw":
                    newX = dragStartImageX + dx;
                    newY = dragStartImageY + dy;
                    newWidth = Math.Max(dragStartImageWidth - dx, minSize);
                    newHeight = Math.Max(dragStartImageHeight - dy, minSize);
                    break;
                case "n":
                    newY = dragStartImageY + dy;
                    newHeight = Math.Max(dragStartImageHeight - dy, minSize);
                    break;
                case "ne":
                    newY = dragStartImageY + dy;
                    newWidth = Math.Max(dragStartImageWidth + dx, minSize);
                    newHeight = Math.Max(dragStartImageHeight - dy, minSize);
                    break;
                case "e":
                    newWidth = Math.Max(dragStartImageWidth + dx, minSize);
                    break;
                case "se":
                    newWidth = Math.Max(dragStartImageWidth + dx, minSize);
                    newHeight = Math.Max(dragStartImageHeight + dy, minSize);
                    break;
                case "s":
                    newHeight = Math.Max(dragStartImageHeight + dy, minSize);
                    break;
                case "sw":
                    newX = dragStartImageX + dx;
                    newWidth = Math.Max(dragStartImageWidth - dx, minSize);
                    newHeight = Math.Max(dragStartImageHeight + dy, minSize);
                    break;
                case "w":
                    newX = dragStartImageX + dx;
                    newWidth = Math.Max(dragStartImageWidth - dx, minSize);
                    break;
            }
        }

        element.X = newX;
        element.Y = newY;
        element.Width = newWidth;
        element.Height = newHeight;
    }

    [JSInvokable]
    public void OnGlobalMouseUp()
    {
        draggingElementId = null;
        draggingImageId = null;
        resizingImageId = null;
        resizingHandle = null;
        isDragging = false;
        StateHasChanged();
    }

    public class MouseMoveArgs
    {
        public double ClientX { get; set; }
        public double ClientY { get; set; }
    }

    [JSInvokable]
    public void OnGlobalMouseMove(MouseMoveArgs e)
    {
        bool changed = false;

        // 画像リサイズ
        if (resizingImageId != null && resizingHandle != null)
        {
            var element = editElements.FirstOrDefault(el => el.Id == resizingImageId);
            if (element == null) return;
            var dx = (e.ClientX - dragStartMouseX) / zoomLevel;
            var dy = (e.ClientY - dragStartMouseY) / zoomLevel;
            ResizeImageElement(element, resizingHandle, dx, dy);
            changed = true;
        }
        // 画像ドラッグ
        else if (draggingImageId != null)
        {
            var element = editElements.FirstOrDefault(el => el.Id == draggingImageId);
            if (element == null) return;
            var dx = (e.ClientX - dragStartMouseX) / zoomLevel;
            var dy = (e.ClientY - dragStartMouseY) / zoomLevel;
            element.X = dragStartImageX + dx;
            element.Y = dragStartImageY + dy;
            changed = true;
        }
        // テキスト要素のドラッグ
        else if (draggingElementId != null)
        {
            var element = editElements.FirstOrDefault(el => el.Id == draggingElementId);
            if (element == null) return;
            var dx = (e.ClientX - dragStartMouseX) / zoomLevel;
            var dy = (e.ClientY - dragStartMouseY) / zoomLevel;
            element.X = dragStartElementX + dx;
            element.Y = dragStartElementY + dy;
            changed = true;
        }

        if (changed) StateHasChanged();
    }

    [JSInvokable]
    public async Task OnImageBase64Loaded(string base64, double width, double height)
    {
        // canvas の実表示サイズを取得して、その中で画像が最大で表示されるサイズを決める
        var canvasSelector = $"#pdf-canvas-{safeFileId}-{PageIndex}";
        var canvasRect = await JS.InvokeAsync<RectDto>("getElementRect", canvasSelector);

        // フォールバックは displayWidth/displayHeight（既に Redraw で設定済み）
        var availW = canvasRect.width > 0 ? canvasRect.width : pageWidth * zoomLevel;
        var availH = canvasRect.height > 0 ? canvasRect.height : pageHeight * zoomLevel;

        // 親（canvas）に対して画像を占める最大比率（例: 50%）
        double maxRatio = 0.5;
        double maxWidth = Math.Max(1, availW * maxRatio);
        double maxHeight = Math.Max(1, availH * maxRatio);

        double scale = Math.Min(maxWidth / width, maxHeight / height);
        if (scale > 1) scale = 1;

        double displayW = width * scale;
        double displayH = height * scale;

        // element.Width/Height は「ページ座標単位」で格納しているので、表示ピクセル -> ページ座標に戻す
        var element = new EditElement
        {
            Type = ElementType.Image,
            X = 100,
            Y = 100,
            Width = displayW / zoomLevel,
            Height = displayH / zoomLevel,
            ImageOriginalWidth = width,
            ImageOriginalHeight = height,
            ImageUrl = base64
        };
        editElements.Add(element);
        StateHasChanged();
    }

    private async Task OnImageSelected(ChangeEventArgs e)
    {
        // e.ValueはIBrowserFile[]またはstring
        var files = (e.Value as Microsoft.AspNetCore.Components.Forms.IBrowserFile[]);
        if (files != null && files.Length > 0)
        {
            var file = files[0];
            var contentType = file.ContentType?.ToLower() ?? "";
            if (!(contentType.StartsWith("image/png") || contentType.StartsWith("image/jpeg")))
            {
                await JS.InvokeVoidAsync("alert", "PNGまたはJPEG画像のみ追加できます。");
                await JS.InvokeVoidAsync("clearFileInput", fileInputRef);
                return;
            }
            // ここでファイル処理
        }
        await JS.InvokeVoidAsync("readImageAsBase64", fileInputRef, DotNetObjectReference.Create(this));
        await JS.InvokeVoidAsync("clearFileInput", fileInputRef);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerGlobalMouseUp", _dotNetRef);
            await JS.InvokeVoidAsync("registerGlobalMouseMove", _dotNetRef);

            var allPages = PdfDataService.GetModel().Pages;
            var pageItem = allPages.FirstOrDefault(p => p.FileId == FileId && p.OriginalPageIndex == PageIndex);

            if (pageItem == null)
            {
                Navigation.NavigateTo("/edit");
                return;
            }

            fileName = pageItem?.FileName ?? "";

            cachedPageSource = await JS.InvokeAsync<PageSourceInfo>("getPageSourceInfo", safeFileId, PageIndex, pageItem?.PageData ?? "");
            if (cachedPageSource == null)
            {
                cachedPageSource = new PageSourceInfo { origW = pageWidth, origH = pageHeight, dpr = await JS.InvokeAsync<double>("eval", "window.devicePixelRatio || 1") };
            }

            pageWidth = (int)cachedPageSource.origW;
            pageHeight = (int)cachedPageSource.origH;

            // 初期表示時にキャンバス/親要素の実サイズを取得して、ページ全体が見える倍率に合わせる
            await RedrawPdfPage(applyFit: true);

        }
    }

    public async ValueTask DisposeAsync()
    {
        await JS.InvokeVoidAsync("unregisterGlobalMouseUp");
        await JS.InvokeVoidAsync("unregisterGlobalMouseMove");
        _dotNetRef?.Dispose();
    }

    private void NavigateBack()
    {
        //JavaScript interop で history.back() を使うのも検討
        Navigation.NavigateTo("/edit");
    }

    private async void ZoomIn()
    {
        zoomLevel = Math.Min(zoomLevel * 1.2, 5.0);
        await RedrawPdfPage();
    }

    private async void ZoomOut()
    {
        zoomLevel = Math.Max(zoomLevel / 1.2, 0.1);
        await RedrawPdfPage();
    }

    private async void FitToScreen()
    {
        offsetX = 0;
        offsetY = 0;
        await RedrawPdfPage(applyFit: true);
    }
    private class RectDto
    {
        public double left { get; set; }
        public double top { get; set; }
        public double width { get; set; }
        public double height { get; set; }
    }

    public class PageSourceInfo {
        public double origW { get; set; } 
        public double origH { get; set; } 
        public double cssW { get; set; } 
        public double cssH { get; set; } 
        public double backingW { get; set; } 
        public double backingH { get; set; } 
        public double dpr { get; set; }
    }

    // PDF再描画用メソッドを追加
    private async Task RedrawPdfPage(bool applyFit = false)
    {
        var allPages = PdfDataService.GetModel().Pages;
        var pageItem = allPages.FirstOrDefault(p => p.FileId == FileId && p.OriginalPageIndex == PageIndex);
        if (pageItem == null) return;

        // getElementRectなどの値を確実に取得できるように待機
        await InvokeAsync(StateHasChanged);
        await JS.InvokeVoidAsync("waitForNextFrame");

        var src = cachedPageSource;
        if (src == null)
        {
            src = new PageSourceInfo
            {
                origW = pageWidth,
                origH = pageHeight,
                dpr = 1.0
            };
        }

        // 編集領域コンテナの可用サイズを取得
        var containerRect = await JS.InvokeAsync<RectDto>("getElementRect", ".edit-canvas-container");
        var availW = Math.Max(1, containerRect.width);
        var availH = Math.Max(1, containerRect.height);

        // origW/origH を基準にフィット（これで横長なら横幅いっぱい、縦長なら縦幅いっぱい）
        var logicalW = Math.Max(1, src.origW);
        var logicalH = Math.Max(1, src.origH);
        double fitScale = Math.Min(availW / logicalW, availH / logicalH);
        if (double.IsNaN(fitScale) || fitScale <= 0) fitScale = 1.0;

        if (applyFit)
        {
            zoomLevel = Math.Max(0.1, Math.Min(fitScale, 5.0));
        }

        await JS.InvokeVoidAsync("drawPdfPageToCanvas", safeFileId, PageIndex, pageItem?.PageData ?? "", zoomLevel);
        StateHasChanged();
    }

    private void SetTool(EditTool tool)
    {
        currentTool = tool;
        selectedElementIds.Clear();
    }

    private void OnCanvasMouseDown(MouseEventArgs e)
    {
        // テキストエリアのドラッグ中はページ移動を開始しない
        if (draggingElementId != null) return;

        if (currentTool == EditTool.Select)
        {
            isDragging = true;
            lastMouseX = e.ClientX;
            lastMouseY = e.ClientY;
        }
    }

    private void OnCanvasMouseUp(MouseEventArgs e)
    {
        isDragging = false;
        draggingElementId = null;
    }

    private void OnCanvasWheel(WheelEventArgs e)
    {
        if (e.DeltaY < 0)
            ZoomIn();
        else
            ZoomOut();
    }

    // C#で座標を受け取るクラス
    private class CanvasCoords
    {
        public double x { get; set; }
        public double y { get; set; }
    }
    private async Task OnPageClick(MouseEventArgs e)
    {
        // カラーピッカーが開いている場合は何もしない
        if (ignoreNextPageClick)
        {
            ignoreNextPageClick = false;
            return;
        }

        // JSでクリックターゲットのタグ名を取得
        var tagName = await JS.InvokeAsync<string>("getTagNameFromEvent", e);
        if (tagName == "INPUT" || tagName == "BUTTON") return;

        // すでにテキスト編集中の要素があれば追加しない
        var editingElement = editElements.FirstOrDefault(el => el.IsEditing);
        if (editingElement != null)
        {
            // ここで全てのIsEditingをfalseにしておく
            foreach (var el in editElements)
                el.IsEditing = false;
            StateHasChanged();
            return;
        }

        // 選択中が1つ以上なら、選択解除だけして終了
        if (selectedElementIds.Count > 0)
        {
            selectedElementIds.Clear();
            ResetFontToDefault();
            return;
        }

        // テキストボックス新規追加
        if (currentTool == EditTool.Text)
        {
            // JSで正確なキャンバス座標を取得
            var coords = await JS.InvokeAsync<CanvasCoords>(
            "getCanvasCoords",
            $"#pdf-canvas-{safeFileId}-{PageIndex}",
            e.ClientX,
            e.ClientY,
            offsetX,
            offsetY,
            zoomLevel
            );

            var element = new EditElement
            {
                Type = ElementType.Text,
                X = coords.x,
                Y = coords.y,
                Text = "テキスト",
                FontSize = fontSize,
                Color = textColor,
                IsEditing = true,
                FontFamily = fontFamily,
            };
            editElements.Add(element);

            StateHasChanged();
            await InvokeAsync(StateHasChanged);
            await Task.Yield();
            try
            {
                await textInputRef.FocusAsync();
                await JS.InvokeVoidAsync("selectAllTextarea", textInputRef);
                await JS.InvokeVoidAsync("autoResizeTextarea", textInputRef);
            }
            catch
            {
                // フォーカス失敗は無視
            }
        }
        else
        {
            selectedElementIds.Clear();
            ResetFontToDefault();
        }
    }

    private async Task TriggerImageInput()
    {
        await fileInputRef.FocusAsync();
        await JS.InvokeVoidAsync("triggerFileInput", fileInputRef);
    }

    // 選択された要素のIDを格納
    private void SelectElement(string elementId, bool multi = false)
    {
        // すべての編集中状態を解除
        foreach (var el in editElements)
            el.IsEditing = false;

        if (multi)
        {
            if (!selectedElementIds.Contains(elementId))
                selectedElementIds.Add(elementId);
        }
        else
        {
            selectedElementIds.Clear();
            selectedElementIds.Add(elementId);
        }

        var selected = editElements.FirstOrDefault(el => el.Id == elementId);
        if (selected != null)
        {
            fontFamily = selected.FontFamily;
            if (selected.Type == ElementType.Text)
            {
                _fontSize = selected.FontSize;
            }
        }

        StateHasChanged();
    }

    private void FinishTextEdit(EditElement element)
    {
        if (ignoreTextBlur)
        {
            ignoreTextBlur = false;
            // ツールバー操作時は編集中を維持
            return;
        }

        element.IsEditing = false;
        fontFamily = element.FontFamily;

        // blur による直後の page click で新規追加されないようにする
        ignoreNextPageClick = true;

        // 念のため短時間後に自動解除（例: 300ms）。不要なら削除可。
        _ = Task.Run(async () =>
        {
            await Task.Delay(300);
            ignoreNextPageClick = false;
            await InvokeAsync(StateHasChanged);
        });

        StateHasChanged();
    }

    private async Task OnTextKeyPress(KeyboardEventArgs e, EditElement element)
    {
        if (e.Key == "Enter")
        {
            element.IsEditing = false;
            await textInputRef.FocusAsync();
        }
    }

    private void DeleteElement(string elementId)
    {
        editElements.RemoveAll(e => e.Id == elementId);
        selectedElementIds.Remove(elementId);

        // フォントサイズをデフォルトに戻す
        if (selectedElementIds.Count == 0)
        {
            ResetFontToDefault();
        }

        // 画像削除後にもinputをクリア
        _ = JS.InvokeVoidAsync("clearFileInput", fileInputRef);
    }

    private async Task SaveChanges()
    {
        // 現在のページを取得
        var allPages = PdfDataService.GetModel().Pages;
        var pageItem = allPages.FirstOrDefault(p => p.FileId == FileId && p.OriginalPageIndex == PageIndex);

        if (pageItem != null)
        {
            try
            {
                var editJson = JsonSerializer.Serialize(editElements);

                var newPdfBase64 = await JS.InvokeAsync<string>(
                    "editPdfPageWithElements",
                    pageItem.PageData, // extractPdfPageで取得したPDF Base64
                    editJson
                );
                pageItem.PageData = newPdfBase64;
                pageItem.Thumbnail = "";
                pageItem.IsLoading = true;
                await PdfDataService.LoadAllPagesForFileAsync(pageItem.FileId, loadThumbnails: true);
                await JS.InvokeVoidAsync("alert", "変更を保存しました");
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"保存時エラー: {ex.Message}");
                Console.WriteLine($"保存時エラー: {ex}");
            }
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "ページ情報が見つかりません");

        }
    }
}
