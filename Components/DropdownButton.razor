@typeparam T

<div class="inline-flex shadow border border-gray-300 rounded-lg bg-white h-10 ml-2 relative">
    <button
        class="@($"{ButtonClass} flex items-center px-4 py-1 h-full rounded-lg font-bold transition focus:outline-none")"
        @onclick="ToggleMenu" title="@ButtonLabel">
        @if (!string.IsNullOrEmpty(ButtonIconHtml))
        {
            @((MarkupString)ButtonIconHtml)
        }
        <span class="hidden xl:inline">@ButtonLabel</span>
        <svg width='16' height='16' viewBox='0 0 20 20' fill='currentColor' class='ml-2'>
            <polygon points='5,8 10,13 15,8' />
        </svg>
    </button>
    @if (ShowMenu)
    {
        <div class="fixed inset-0 z-40" @onclick="CloseMenu" style="background:transparent;"></div>
        <div id="@MenuId"
            class="absolute top-full left-0 mt-1 min-w-[120px] bg-white rounded-lg shadow-lg z-50 border border-gray-300"
            @onclick:stopPropagation>
            @foreach (var item in MenuItems)
            {
                <button class="w-full text-left px-4 py-2 hover:bg-blue-50 text-gray-800 whitespace-nowrap"
                    @onclick="() => OnMenuItemClick(item)">
                    @if (!string.IsNullOrEmpty(item.IconHtml))
                    {
                        @((MarkupString)item.IconHtml)
                    }
                    <span>@item.Label</span>
                </button>
            }
        </div>
    }
</div>

@code {
    [Parameter] public string ButtonLabel { get; set; } = "追加";
    [Parameter] public string ButtonClass { get; set; } = "bg-white text-gray-800 hover:bg-blue-50";
    [Parameter] public string ButtonIconHtml { get; set; } = "";
    [Parameter] public string MenuId { get; set; } = "dropdownMenu";
    [Parameter] public List<DropdownMenuItem> MenuItems { get; set; } = new();

    [Parameter] public EventCallback OnToggle { get; set; }

    private DotNetObjectReference<DropdownButton<T>>? dotNetRef;

    private bool ShowMenu { get; set; } = false;

    private async Task OnMenuItemClick(DropdownMenuItem item)
    {
        ShowMenu = false;
        await item.OnClick.InvokeAsync();
    }

    private async Task ToggleMenu()
    {
        ShowMenu = !ShowMenu;
        await OnToggle.InvokeAsync();
    }

    [JSInvokable]
    public void CloseMenu()
    {
        ShowMenu = false;
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}
