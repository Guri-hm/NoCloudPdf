@if (!string.IsNullOrEmpty(Message))
{
    <div class="fixed top-4 right-4 z-50 max-w-md" style="min-width:180px;">
        <div class="w-full h-2 rounded-t-lg overflow-hidden bg-gray-300">
            <div class="@BarColor message-bar-anim h-full transition-all" style="width:100%" @key="Message"></div>
        </div>
        <div class="px-4 py-2 rounded-b-lg shadow transition-all duration-300 @BoxColor">
            <div class="flex items-start gap-2">
                <div class="flex-1">
                    @Message
                </div>
                <button class="ml-2" @onclick="OnCloseClicked" style="color:inherit;">
                    âœ•
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string? Message { get; set; }
    [Parameter] public bool IsError { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public int? AutoCloseMs { get; set; }

    private string BarColor => IsError ? "bg-red-500" : "bg-yellow-400";
    private string BoxColor => IsError ? "bg-red-500 text-white" : "bg-yellow-100 text-yellow-900 border border-yellow-400";

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Message) && AutoCloseMs.HasValue)
        {
            await Task.Delay(AutoCloseMs.Value);
            if (OnClose.HasDelegate)
                await OnClose.InvokeAsync();
        }
    }

    private async Task OnCloseClicked()
    {
        if (OnClose.HasDelegate)
            await OnClose.InvokeAsync();
    }
}