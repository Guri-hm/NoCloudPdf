@using ClientPdfApp.Models
@using Microsoft.AspNetCore.Components.Web

<div class="sortable-item-container group flex flex-col md:flex-row items-center px-2 py-1 rounded gap-2 w-full md:w-auto" data-index="@Index">

    <div class="items-center relative mr-2 flex flex-row md:flex-col h-full justify-center w-full md:w-auto" data-position="@Index">
        <!-- 破線（分割の目印） -->
        @if (OperationMode == OperationMode.Split && Index > 0)
        {
            var isSplitBefore = SplitPositions.Contains(Index);

            @* 分割の目印（左/上） *@
            <div class="h-full w-full md:w-auto md:h-full opacity-70 border-l-2 md:border-l-2 border-t-2 md:border-t-0 @(isSplitBefore ? "border-solid border-blue-600" : "border-dashed border-blue-500/60")"></div>
            <button
                class="w-6 h-6 rounded-full flex items-center justify-center transition-all duration-200 mx-1 md:mx-0 md:mt-1 md:mb-1 hover:bg-blue-600 hover:bg-opacity-100 @(isSplitBefore ? "bg-blue-600" : "bg-blue-500/60")"
                style="aspect-ratio:1/1;opacity:@(isSplitBefore ? "1" : "0.5");"
                data-position="@Index"
                @onclick="() => OnCheckChanged.InvokeAsync(Index)">
                <i class="text-white fa-solid fa-scissors md:rotate-[-90deg] rotate-0"
                style="font-size:16px;"></i>
            </button>
            @* 分割の目印（右/下） *@
            <div class="h-full w-full md:w-auto md:h-full opacity-70 border-l-2 md:border-l-2 border-t-2 md:border-t-0 @(isSplitBefore ? "border-solid border-blue-600" : "border-dashed border-blue-500/60")"></div>
        }
        <!-- ＋ボタン（PCのみ表示） -->
        @if ((OperationMode != OperationMode.Split))
        {
            <DropdownButton T="string"
                MenuId="@($"addMenu-{Index}")"
                MenuItems="@GetAddMenuItems(Index)">
                <Trigger>
                    <button
                        class="w-6 h-6 bg-blue-500/60 hover:bg-blue-600 hover:bg-opacity-100 text-white rounded-full flex items-center justify-center transition-all duration-200"
                        data-position="@Index">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="w-3 h-3">
                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" />
                        </svg>
                    </button>
                </Trigger>
            </DropdownButton>
            @if (Index > 0 && Index < DisplayItemsCount)
            {
                <button class="absolute top-[30px] bg-amber-400 hover:bg-amber-500
                        text-[#212529] border border-amber-400 hover:border-[#d39e00]
                        rounded-full w-6 h-6 text-[10px] flex items-center justify-center cursor-pointer z-20 transition p-0 opacity-60 hover:opacity-100 hidden md:inline-flex"
                    @onclick="() => OnSwapWithNext.InvokeAsync(Index - 1)" title="前後入れ替え">
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#212529" stroke-width="2"
                        stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="7 17 2 12 7 7" />
                        <polyline points="17 7 22 12 17 17" />
                        <line x1="2" y1="12" x2="22" y2="12" />
                    </svg>
                </button>
            }
    }
    </div>
    <div style="cursor: move;" class="drag-handle group flex flex-row bg-white md:bg-transparent w-full md:w-auto">
        <!-- ドラッグハンドル -->
        <span class="touch-drag-handle cursor-grab flex items-center justify-center cursor-grab text-gray-400 hover:text-blue-500 mx-3 md:hidden"
            style="touch-action: none;">
            <i class="fa-solid fa-grip-vertical text-xl"></i>
        </span>
        <!-- サムネイル＋ページ情報 -->
        <div class="flex flex-row md:flex-col flex-1 items-center md:items-stretch relative @(OperationMode == OperationMode.Extract && Item.IsSelectedForExtract ? "ring-4 ring-blue-400 bg-blue-100/60" : "")">
            @* サムネイル左上にチェックボックス *@
            @if (OperationMode == OperationMode.Extract)
            {
                <div class="absolute top-2 left-2 z-10">
                    <input  type="checkbox"                            
                            checked="@Item.IsSelectedForExtract"
                            @onchange="() => OnSelectChanged.InvokeAsync(Index)"
                            class="form-checkbox h-6 w-6 accent-blue-500" />
                </div>
            }
            <!-- サムネイル -->
            <div class="w-24 h-32 flex items-center justify-center md:w-24 md:h-32 w-10 h-14 mr-2 md:mr-0 scale-90 md:scale-100 transition-transform duration-200"
                @onclick="() => OnShowPreview.InvokeAsync((Index, 0))">
                @{
                    var isMultiPage = Mode == DisplayMode.File && Item.PageInfo?.Contains("ページ") == true;
                    int angle = Item.RotateAngle % 360;
                    string rotateClass = angle switch
                    {
                        0 => "rotate-0",
                        90 => "rotate-90",
                        180 => "rotate-180",
                        270 => "rotate-270",
                        _ => "rotate-0"
                    };
                    double scale = (angle == 90 || angle == 270)
                        ? Math.Min(96.0 / 128.0, 128.0 / 96.0)
                        : 1.0;
                    string transform = $"scale({scale.ToString("0.###", System.Globalization.CultureInfo.InvariantCulture)})";
                }
                @if (Item.IsLoading)
                {
                    <div class="page-loading w-full h-full"></div>
                }
                else if (Item.HasError)
                {
                    @if (Item.RawData is PageItem pageItem && pageItem.HasPageDataError)
                    {
                        <div class="page-error w-full h-full flex flex-col items-center justify-center bg-gray-100 text-red-700">
                            <ErrorPdfIcon class="mb-1 w-8 h-8" />
                            <div class="font-bold text-xs">データなし</div>
                        </div>
                    }else{

                    <div class="page-error w-full h-full flex flex-col items-center justify-center cursor-pointer hover:bg-red-100 transition"
                        title="クリックで再読み込み"
                        @onclick="() => OnReloadPageItem.InvokeAsync(Item)"
                        @onclick:stopPropagation>
                        <svg viewBox="0 0 24 24" fill="none" class="mb-1 w-8 h-8">
                            <path d="M13 3L13.7071 2.29289C13.5196 2.10536 13.2652 2 13 2V3ZM14 22C14.5523 22 15 21.5523 15 21C15 20.4477 14.5523 20 14 20V22ZM19 9H20C20 8.73478 19.8946 8.48043 19.7071 8.29289L19 9ZM18 10C18 10.5523 18.4477 11 19 11C19.5523 11 20 10.5523 20 10H18ZM5.21799 19.908L4.32698 20.362H4.32698L5.21799 19.908ZM6.09202 20.782L6.54601 19.891L6.54601 19.891L6.09202 20.782ZM6.09202 3.21799L5.63803 2.32698L5.63803 2.32698L6.09202 3.21799ZM5.21799 4.09202L4.32698 3.63803L4.32698 3.63803L5.21799 4.09202ZM13.109 8.45399L14 8V8L13.109 8.45399ZM13.546 8.89101L14 8L13.546 8.89101ZM17.2299 17.7929C16.8394 18.1834 16.8394 18.8166 17.2299 19.2071C17.6204 19.5976 18.2536 19.5976 18.6441 19.2071L17.2299 17.7929ZM15.0316 15.2507C14.8939 15.7856 15.2159 16.3308 15.7507 16.4684C16.2856 16.6061 16.8308 16.2841 16.9684 15.7493L15.0316 15.2507ZM17.9375 20C17.3852 20 16.9375 20.4477 16.9375 21C16.9375 21.5523 17.3852 22 17.9375 22V20ZM17.9475 22C18.4998 22 18.9475 21.5523 18.9475 21C18.9475 20.4477 18.4998 20 17.9475 20V22ZM13 2H8.2V4H13V2ZM4 6.2V17.8H6V6.2H4ZM8.2 22H14V20H8.2V22ZM19.7071 8.29289L13.7071 2.29289L12.2929 3.70711L18.2929 9.70711L19.7071 8.29289ZM20 10V9H18V10H20ZM4 17.8C4 18.3436 3.99922 18.8114 4.03057 19.195C4.06287 19.5904 4.13419 19.9836 4.32698 20.362L6.10899 19.454C6.0838 19.4045 6.04612 19.3038 6.02393 19.0322C6.00078 18.7488 6 18.3766 6 17.8H4ZM8.2 20C7.62345 20 7.25117 19.9992 6.96784 19.9761C6.69617 19.9539 6.59545 19.9162 6.54601 19.891L5.63803 21.673C6.01641 21.8658 6.40963 21.9371 6.80497 21.9694C7.18864 22.0008 7.65645 22 8.2 22V20ZM4.32698 20.362C4.6146 20.9265 5.07354 21.3854 5.63803 21.673L6.54601 19.891C6.35785 19.7951 6.20487 19.6422 6.10899 19.454L4.32698 20.362ZM8.2 2C7.65645 2 7.18864 1.99922 6.80497 2.03057C6.40963 2.06287 6.01641 2.13419 5.63803 2.32698L6.54601 4.10899C6.59545 4.0838 6.69617 4.04612 6.96784 4.02393C7.25117 4.00078 7.62345 4 8.2 4V2ZM6 6.2C6 5.62345 6.00078 5.25117 6.02393 4.96784C6.04612 4.69617 6.0838 4.59545 6.10899 4.54601L4.32698 3.63803C4.13419 4.01641 4.06287 4.40963 4.03057 4.80497C3.99922 5.18864 4 5.65645 4 6.2H6ZM5.63803 2.32698C5.07354 2.6146 4.6146 3.07354 4.32698 3.63803L6.10899 4.54601C6.20487 4.35785 6.35785 4.20487 6.54601 4.10899L5.63803 2.32698ZM12 3V7.4H14V3H12ZM14.6 10H19V8H14.6V10ZM12 7.4C12 7.66353 11.9992 7.92131 12.0169 8.13823C12.0356 8.36682 12.0797 8.63656 12.218 8.90798L14 8C14.0293 8.05751 14.0189 8.08028 14.0103 7.97537C14.0008 7.85878 14 7.69653 14 7.4H12ZM14.6 8C14.3035 8 14.1412 7.99922 14.0246 7.9897C13.9197 7.98113 13.9425 7.9707 14 8L13.092 9.78201C13.3634 9.92031 13.6332 9.96438 13.8618 9.98305C14.0787 10.0008 14.3365 10 14.6 10V8ZM12.218 8.90798C12.4097 9.2843 12.7157 9.59027 13.092 9.78201L14 8V8L12.218 8.90798ZM18.937 16C18.937 16.1732 18.8915 16.3053 18.6175 16.5697C18.4638 16.718 18.2828 16.8653 18.0319 17.074C17.7936 17.2723 17.5141 17.5087 17.2299 17.7929L18.6441 19.2071C18.86 18.9913 19.0805 18.8033 19.3109 18.6116C19.5287 18.4305 19.7852 18.2223 20.0065 18.0087C20.4825 17.5493 20.937 16.9314 20.937 16H18.937ZM17.937 15C18.4893 15 18.937 15.4477 18.937 16H20.937C20.937 14.3431 19.5938 13 17.937 13V15ZM16.9684 15.7493C17.0795 15.3177 17.4724 15 17.937 15V13C16.5377 13 15.3645 13.957 15.0316 15.2507L16.9684 15.7493ZM17.9375 22H17.9475V20H17.9375V22Z" fill="#dc2626"/>
                        </svg>
                        <div class="text-red-700 font-bold text-xs mb-1">プレビュー画像の表示に失敗しました</div>
                        <div class="flex items-center gap-1 text-blue-600 text-xs mt-1 underline">
                            <i class="fa-solid fa-rotate-right"></i>
                            再読み込み
                        </div>
                    </div>
                    }
                }
                else if (!string.IsNullOrEmpty(Item.Thumbnail))
                {
                    <canvas id="thumb-@Item.Id"
                            class="w-full h-full object-contain border border-gray-200 bg-white  @rotateClass @(Mode == DisplayMode.Page ? "thumbnail-loaded" : "") @(isMultiPage ? "thumbnail-stack" : "")"
                            draggable="false"
                            width="96" height="128"
                            tabindex="-1"
                            style="transform: @transform;" />
                }
                else
                {
                    <div class="bg-gray-200 w-full h-full rounded"></div>
                }
                @if (isMultiPage && Item.PageInfo?.Contains("ページ") == true)
                {
                    var pageCountMatch = System.Text.RegularExpressions.Regex.Match(Item.PageInfo, @"(\d+)ページ");
                    if (pageCountMatch.Success)
                    {
                        <div class="page-count-badge hidden md:flex absolute top-1 right-[-5px] bg-red-600 text-white rounded-full w-6 h-6 items-center justify-center text-[11px] font-bold z-10 shadow-md border-2 border-white leading-none">
                            @pageCountMatch.Groups[1].Value
                        </div>
                    }
                }
            </div>
            <!-- ファイル名・ページ数 -->
            <div class="flex flex-col justify-center min-w-0 flex-1 md:w-full md:mt-2">
                <div class="file-info">
                    <div class="file-name truncate text-[11px] px-2 rounded" title="@Item.FullFileName"
                        style="background:@(Item.RawData is PageItem pi ? pi.ColorHsl : Item.ColorHsl); margin: 2px 0;">
                        @Item.DisplayName
                    </div>
                    @if (Mode == DisplayMode.Page && !string.IsNullOrEmpty(Item.PageInfo))
                    {
                        <div class="page-number text-[10px] font-normal mt-1">
                            @Item.PageInfo
                        </div>
                    }
                    @if (Mode == DisplayMode.File && Item.PageCount > 1)
                    {
                        <div class="text-[10px] text-gray-500">全 @Item.PageCount ページ</div>
                    }
                </div>
            </div>
        </div>
        <!-- 操作ボタン群 -->
        <div class="flex flex-wrap items-center ml-auto
            md:absolute md:top-2 md:right-2 md:bg-white md:shadow md:rounded-lg md:p-1 md:flex-col md:flex md:opacity-0 md:pointer-events-none md:transition-opacity md:duration-300 md:group-hover:opacity-100 md:group-hover:pointer-events-auto z-20 gap-x-5 md:gap-x-0 md:gap-y-1">
            <button type="button"class="text-green-500 hover:text-green-700 p-1 mx-1 md:mx-0 md:my-0.5" title="複製"
                    @onclick="() => OnDuplicate.InvokeAsync(Index)" @onpointerdown:stopPropagation>
                <i class="fa-solid fa-copy"></i>
            </button>
            <button type="button"class="text-blue-500 hover:text-blue-700 p-1 mx-1 md:mx-0 md:my-0.5" title="回転"
                    @onclick="() => OnRotate.InvokeAsync(Index)" @onpointerdown:stopPropagation>
                <i class="fa-solid fa-rotate-right"></i>
            </button>
            <button type="button" class="text-purple-500 hover:text-purple-700 p-1 mx-1 md:mx-0 md:my-0.5 hidden md:block" title="拡大プレビュー"
                    @onclick="() => OnShowPreview.InvokeAsync((Index, 0))" @onpointerdown:stopPropagation>
                <i class="fa-solid fa-magnifying-glass-plus"></i>
            </button>
            <button type="button" class="text-red-500 hover:text-red-700 p-1 mx-1 md:mx-0 md:my-0.5" title="削除"
                    @onclick="() => OnRemove.InvokeAsync(Index)" @onpointerdown:stopPropagation>
                <i class="fa-solid fa-trash"></i>
            </button>
        </div>
        
    </div>
</div>

@code {
    [Parameter] public DisplayItem Item { get; set; } = default!;
    [Parameter] public int Index { get; set; }
    [Parameter] public int DisplayItemsCount { get; set; }
    [Parameter] public DisplayMode Mode { get; set; }
    [Parameter] public OperationMode OperationMode { get; set; }
    [Parameter] public EventCallback<int> OnDuplicate { get; set; }
    [Parameter] public EventCallback<int> OnRotate { get; set; }
    [Parameter] public EventCallback<(int fileIndex, int pageIndex)> OnShowPreview { get; set; }
    [Parameter] public EventCallback<int> OnRemove { get; set; }
    [Parameter] public EventCallback<int> OnSwapWithNext { get; set; }
    [Parameter] public EventCallback<DisplayItem> OnReloadPageItem { get; set; }
    [Parameter] public EventCallback<int> OnCheckChanged { get; set; }
    [Parameter] public EventCallback<int> OnSelectChanged { get; set; }
    [Parameter] public IReadOnlyCollection<int> SplitPositions { get; set; } = Array.Empty<int>();
[Parameter] public EventCallback<int> OnInsertBlankPage { get; set; }
[Parameter] public EventCallback<int> OnInsertPdfAtPosition { get; set; }

    private List<DropdownMenuItem> GetAddMenuItems(int index)
    {
        return new List<DropdownMenuItem>
        {
            new DropdownMenuItem
            {
                Label = "空白ページを追加",
                OnClick = EventCallback.Factory.Create(this, () => OnInsertBlankPage.InvokeAsync(index))
            },
            new DropdownMenuItem
            {
                Label = "PDFを挿入",
                OnClick = EventCallback.Factory.Create(this, () => OnInsertPdfAtPosition.InvokeAsync(index))
            }
        };
    }
}