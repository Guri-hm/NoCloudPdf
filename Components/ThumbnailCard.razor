@using NoCloudPdf.Models
@using Microsoft.AspNetCore.Components.Web

@{
    PageItem? pageItem = Item.RawData as PageItem;
}
<div class="sortable-item-container flex flex-col md:flex-row items-center px-2 py-1 rounded gap-3 w-full md:w-auto" data-index="@Index">

    <div class="items-center relative mr-2 flex flex-row md:flex-col h-full justify-center w-full md:w-auto" data-position="@Index">
        <!-- 破線（分割の目印） -->
        @if (OperationMode == OperationMode.Split && Index > 0)
        {
            var isSplitBefore = SplitPositions.Contains(Index);

            @* 分割の目印（左/上） *@
            <div class="h-full w-full md:w-auto md:h-full opacity-70 border-l-2 md:border-l-2 border-t-2 md:border-t-0 @(isSplitBefore ? "border-solid border-blue-600" : "border-dashed border-blue-500/60")"></div>
            <button
                class="w-6 h-6 rounded-full flex items-center justify-center transition-all duration-200 mx-1 md:mx-0 md:mt-1 md:mb-1 hover:bg-blue-600 hover:bg-opacity-100 @(isSplitBefore ? "bg-blue-600" : "bg-blue-500/60")"
                style="aspect-ratio:1/1;opacity:@(isSplitBefore ? "1" : "0.5");"
                data-position="@Index"
                @onclick="() => OnCheckChanged.InvokeAsync(Index)">
                <i class="text-white fa-solid fa-scissors md:rotate-[-90deg] rotate-0"
                style="font-size:16px;"></i>
            </button>
            @* 分割の目印（右/下） *@
            <div class="h-full w-full md:w-auto md:h-full opacity-70 border-l-2 md:border-l-2 border-t-2 md:border-t-0 @(isSplitBefore ? "border-solid border-blue-600" : "border-dashed border-blue-500/60")"></div>
        }
        <!-- ＋ボタン（PCのみ表示） -->
        @if ((OperationMode != OperationMode.Split))
        {
            <DropdownButton T="string"
                MenuId="@($"addMenu-{Index}")"
                MenuItems="@GetAddMenuItems(Index)">
                <Trigger>
                    <button
                        class="w-6 h-6 bg-blue-500/60 hover:bg-blue-600 hover:bg-opacity-100 text-white rounded-full flex items-center justify-center transition-all duration-200"
                        data-position="@Index">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="w-3 h-3">
                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" />
                        </svg>
                    </button>
                </Trigger>
            </DropdownButton>
            @if (Index > 0 && Index < DisplayItemsCount)
            {
                <button class="absolute top-[30px] bg-amber-400 hover:bg-amber-500
                        text-[#212529] border border-amber-400 hover:border-[#d39e00]
                        rounded-full w-6 h-6 text-[10px] flex items-center justify-center cursor-pointer z-20 transition p-0 opacity-60 hover:opacity-100 hidden md:inline-flex"
                    @onclick="() => OnSwapWithNext.InvokeAsync(Index - 1)" title="前後入れ替え">
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#212529" stroke-width="2"
                        stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="7 17 2 12 7 7" />
                        <polyline points="17 7 22 12 17 17" />
                        <line x1="2" y1="12" x2="22" y2="12" />
                    </svg>
                </button>
            }
    }
    </div>
    <div style="cursor: move;" class="drag-handle flex flex-row group bg-white md:bg-transparent w-full md:w-auto">

        <!-- ドラッグハンドル -->
        <span class="touch-drag-handle cursor-grab flex items-center justify-center cursor-grab text-gray-400 hover:text-blue-500 mx-3 md:hidden"
            style="touch-action: none;">
            <i class="fa-solid fa-grip-vertical text-xl"></i>
        </span>
        <!-- サムネイル＋ページ情報 -->
        <div class="flex flex-row md:flex-col flex-1 items-center md:items-stretch relative @(OperationMode == OperationMode.Extract && Item.IsSelectedForExtract ? "ring-4 ring-blue-400 bg-blue-100/60" : "")">
            @* サムネイル左上にチェックボックス *@
            @if (OperationMode == OperationMode.Extract)
            {
                <div class="absolute top-2 left-2 z-10">
                    <input type="checkbox"                            
                            checked="@Item.IsSelectedForExtract"
                            @onchange="() => OnSelectChanged.InvokeAsync(Index)"
                            class="form-checkbox h-6 w-6 accent-blue-500" />
                </div>
            }
            <!-- サムネイル -->
            <div class="w-24 h-32 flex items-center justify-center md:w-24 md:h-32 w-10 h-14 mr-2 md:mr-0 scale-90 md:scale-100 transition-transform duration-200"
                @onclick="() => OnShowPreview.InvokeAsync((Index, 0))">
                @{
                    var isMultiPage = Mode == DisplayMode.File && Item.PageInfo?.Contains("ページ") == true;
                    int angle = Item.RotateAngle % 360;
                    string rotateClass = angle switch
                    {
                        0 => "rotate-0",
                        90 => "rotate-90",
                        180 => "rotate-180",
                        270 => "rotate-270",
                        _ => "rotate-0"
                    };
                    double scale = (angle == 90 || angle == 270)
                        ? Math.Min(96.0 / 128.0, 128.0 / 96.0)
                        : 1.0;
                    string transform = $"scale({scale.ToString("0.###", System.Globalization.CultureInfo.InvariantCulture)})";
                }
                @if (Item.IsLoading)
                {
                    <div class="page-loading w-full h-full"></div>
                }
                else if (Item.HasError)
                {
                    @if (pageItem != null && pageItem.HasPageDataError)
                    {
                        <div class="page-error w-full h-full flex flex-col items-center justify-center bg-gray-100 text-red-700" title="クリックで再読み込み" 
                        @onclick="() => OnReloadPageItem.InvokeAsync(Item)"
                        @onclick:stopPropagation>
                            <ErrorPdfIcon class="mb-1 w-8 h-8 text-red-600" />
                            <div class="font-bold text-xs">データなし</div>
                            <div class="flex items-center gap-1 text-blue-600 text-xs mt-1 underline">
                            <i class="fa-solid fa-rotate-right"></i>
                            再読み込み
                            </div>
                        </div>
                    }else{

                    <div class="page-error w-full h-full flex flex-col items-center justify-center cursor-pointer hover:bg-red-100 transition"
                        title="クリックで再読み込み"
                        @onclick="() => OnReloadPageItem.InvokeAsync(Item)"
                        @onclick:stopPropagation>
                        <ErrorThumbnailIcon Class="mb-1 w-8 h-8 text-red-600 " />
                        <div class="text-red-700 font-bold text-xs mb-1">プレビュー画像の表示に失敗しました</div>
                        <div class="flex items-center gap-1 text-blue-600 text-xs mt-1 underline">
                            <i class="fa-solid fa-rotate-right"></i>
                            再読み込み
                        </div>
                    </div>
                    }
                }
                else if (!string.IsNullOrEmpty(Item.Thumbnail))
                {
                    <canvas id="thumb-@Item.Id"
                            class="w-full h-full object-contain border border-gray-200 bg-white  @rotateClass @(Mode == DisplayMode.Page ? "thumbnail-loaded" : "") @(isMultiPage ? "thumbnail-stack" : "")"
                            draggable="false"
                            width="96" height="128"
                            tabindex="-1"
                            style="transform: @transform;" />
                }
                else
                {
                    <div class="bg-gray-200 w-full h-full rounded"></div>
                }
                @if (isMultiPage && Item.PageInfo?.Contains("ページ") == true)
                {
                    var pageCountMatch = System.Text.RegularExpressions.Regex.Match(Item.PageInfo, @"(\d+)ページ");
                    if (pageCountMatch.Success)
                    {
                        <div class="page-count-badge hidden md:flex absolute top-1 right-[-5px] bg-red-600 text-white rounded-full w-6 h-6 items-center justify-center text-[11px] font-bold z-10 shadow-md border-2 border-white leading-none">
                            @pageCountMatch.Groups[1].Value
                        </div>
                    }
                }
                @if (pageItem != null && pageItem.IsPasswordProtected || pageItem != null && pageItem.IsOperationRestricted)
                {
                    <UnlockIcon Class="absolute top-[-25px] right-[35px] w-6 h-6 text-yellow-500" />
                }
            </div>
            <!-- ファイル名・ページ数 -->
            <div class="flex flex-col justify-center min-w-0 flex-1 md:w-full md:mt-2">
                <div class="file-info">
                    <div class="file-name truncate text-[11px] px-2 rounded" title="@Item.FullFileName"
                        style="background:@(pageItem != null ? pageItem.ColorHsl : Item.ColorHsl); margin: 2px 0;">
                        @Item.DisplayName
                    </div>
                    @if (Mode == DisplayMode.Page && !string.IsNullOrEmpty(Item.PageInfo))
                    {
                        <div class="page-number text-[10px] font-normal mt-1">
                            @Item.PageInfo
                        </div>
                    }
                    @if (Mode == DisplayMode.File && Item.PageCount > 1)
                    {
                        <div class="text-[10px] text-gray-500">全 @Item.PageCount ページ</div>
                    }
                </div>
            </div>
        </div>
        <!-- 操作ボタン群 -->
        <div class="flex flex-wrap items-center ml-auto
            md:absolute md:top-2 md:right-2 md:bg-white md:shadow md:rounded-lg md:p-1 md:flex-col md:flex md:opacity-0 md:pointer-events-none md:transition-opacity md:duration-300 md:group-hover:opacity-100 md:group-hover:pointer-events-auto z-20 gap-x-5 md:gap-x-0 md:gap-y-0">

            <button type="button" class="text-orange-500 hover:text-orage-700 p-1 mx-1 md:mx-0 md:my-0 hidden md:block" title="このページを編集"
                    @onclick="NavigateToPageEdit" @onpointerdown:stopPropagation>
                <i class="fa-solid fa-pen-to-square"></i>
            </button>

            <button type="button"class="text-green-500 hover:text-green-700 p-1 mx-1 md:mx-0 md:my-0" title="複製"
                    @onclick="() => OnDuplicate.InvokeAsync(Index)" @onpointerdown:stopPropagation>
                <i class="fa-solid fa-copy"></i>
            </button>
            <button type="button"class="text-blue-500 hover:text-blue-700 p-1 mx-1 md:mx-0 md:my-0" title="回転"
                    @onclick="() => OnRotate.InvokeAsync(Index)" @onpointerdown:stopPropagation>
                <i class="fa-solid fa-rotate-right"></i>
            </button>
            <button type="button" class="text-purple-500 hover:text-purple-700 p-1 mx-1 md:mx-0 md:my-0 hidden md:block" title="拡大プレビュー"
                    @onclick="() => OnShowPreview.InvokeAsync((Index, 0))" @onpointerdown:stopPropagation>
                <i class="fa-solid fa-magnifying-glass-plus"></i>
            </button>

            <button type="button" class="text-red-500 hover:text-red-700 p-1 mx-1 md:mx-0 md:my-0" title="削除"
                    @onclick="() => OnRemove.InvokeAsync(Index)" @onpointerdown:stopPropagation>
                <i class="fa-solid fa-trash"></i>
            </button>
        </div>
        
    </div>
</div>

@code {
    [Parameter] public DisplayItem Item { get; set; } = default!;
    [Parameter] public int Index { get; set; }
    [Parameter] public int DisplayItemsCount { get; set; }
    [Parameter] public DisplayMode Mode { get; set; }
    [Parameter] public OperationMode OperationMode { get; set; }
    [Parameter] public EventCallback<int> OnDuplicate { get; set; }
    [Parameter] public EventCallback<int> OnRotate { get; set; }
    [Parameter] public EventCallback<(int fileIndex, int pageIndex)> OnShowPreview { get; set; }
    [Parameter] public EventCallback<int> OnRemove { get; set; }
    [Parameter] public EventCallback<int> OnSwapWithNext { get; set; }
    [Parameter] public EventCallback<DisplayItem> OnReloadPageItem { get; set; }
    [Parameter] public EventCallback<int> OnCheckChanged { get; set; }
    [Parameter] public EventCallback<int> OnSelectChanged { get; set; }
    [Parameter] public IReadOnlyCollection<int> SplitPositions { get; set; } = Array.Empty<int>();
    [Parameter] public EventCallback<int> OnInsertBlankPage { get; set; }
    [Parameter] public EventCallback<int> OnInsertPdfAtPosition { get; set; }

    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private void NavigateToPageEdit()
    {
        if (Item.RawData is PageItem pageItem)
        {
            var fileId = pageItem.FileId;
            var pageIndex = pageItem.OriginalPageIndex;
            Navigation.NavigateTo($"/edit/page/{fileId}/{pageIndex}");
        }
    }

    private List<DropdownMenuItem> GetAddMenuItems(int index)
    {
        return new List<DropdownMenuItem>
        {
            new DropdownMenuItem
            {
                Label = "空白ページを追加",
                OnClick = EventCallback.Factory.Create(this, () => OnInsertBlankPage.InvokeAsync(index))
            },
            new DropdownMenuItem
            {
                Label = "PDFを挿入",
                OnClick = EventCallback.Factory.Create(this, () => OnInsertPdfAtPosition.InvokeAsync(index))
            }
        };
    }
}