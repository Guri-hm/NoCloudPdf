@typeparam T

<div class="inline-flex shadow rounded-lg h-10">
    @for (int i = 0; i < Actions.Count; i++)
    {
        ActionButtonItem? action = Actions[i];
        string? roundedClass = Actions.Count == 1
        ? "rounded-lg"
        : (i == 0 ? "rounded-s-lg" : (i == Actions.Count - 1 ? "rounded-e-lg" : ""));
        // 枠線は通常ボタンのみ。ButtonClassに"border"が含まれていない場合のみ枠線を追加
        string? borderClass = string.IsNullOrEmpty(action.ButtonClass) && i < Actions.Count - 1 ? "border-e border-gray-300" :
        "";

        string? effectiveBtnClass = string.IsNullOrWhiteSpace(action.ButtonClass) ? "bg-white hover:bg-gray-100" : action.ButtonClass;
        string? textColor = action.TextColor;
        string gapClass = string.IsNullOrWhiteSpace(action.Label) ? "" : "gap-3";

        <button
            class="@($"{effectiveBtnClass} {textColor} px-4 py-1 font-bold focus:outline-none transition flex items-center {gapClass} {roundedClass} {borderClass}")"
            @onclick="() => action.OnClick.InvokeAsync()"
            @onclick:stopPropagation="action.StopPropagation" title="@action.Title">

            @if (string.IsNullOrEmpty(action.IconPosition) || action.IconPosition == "left")
            {
                if (action.Icon != null)
                {
                    @action.Icon
                }
                else if (!string.IsNullOrEmpty(action.IconHtml))
                {
                    <span>
                        @((MarkupString)action.IconHtml)
                    </span>
                }
            }

            <span class="break-keep flex-1 text-center @(HideLabelOnNarrow ? "hidden xl:inline" : "")">
                @action.Label
            </span>
            @if (action.IconPosition == "right" && !string.IsNullOrEmpty(action.IconHtml))
            {
                <span>
                    @((MarkupString)action.IconHtml)
                </span>
            }
        </button>
    }
</div>

@code {
    [Parameter]
    public List<ActionButtonItem> Actions { get; set; } = new();
    [Parameter]
    public bool HideLabelOnNarrow { get; set; } = true;
}