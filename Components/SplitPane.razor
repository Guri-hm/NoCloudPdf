@using Microsoft.JSInterop
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div id="@ContainerId" class="flex-1 flex overflow-hidden">
    <div id="@LeftId" class="w-auto overflow-y-auto flex-none @LeftAreaClass"
         style="--thumbnail-width: @(LeftWidthPx); width: var(--thumbnail-width);">
        @Left
    </div>

    <div id="@HandleId" class="w-1 bg-gray-400 cursor-ew-resize hover:bg-blue-500 flex-none"
         style="touch-action: none;">
    </div>

    <div class="flex-1 min-w-0">
        <div id="@RightContainerId" class="relative h-full overflow-auto @RightAreaClass">
            @Right
        </div>
    </div>
</div>

@code {
    [Parameter] public RenderFragment? Left { get; set; }
    [Parameter] public RenderFragment? Right { get; set; }

    // two-way left width (px)
    [Parameter] public int LeftWidth { get; set; } = 300;
    [Parameter] public EventCallback<int> LeftWidthChanged { get; set; }

    // optional CSS classes
    [Parameter] public string LeftAreaClass { get; set; } = "bg-gray-50 border-r border-gray-300 p-4";
    [Parameter] public string RightAreaClass { get; set; } = "bg-gray-100 p-4 flex flex-col gap-4";

    // ids
    [Parameter] public string ContainerId { get; set; } = "split-container";
    [Parameter] public string LeftId { get; set; } = "thumbnail-area";
    [Parameter] public string HandleId { get; set; } = "splitter-handle";
    [Parameter] public string RightContainerId { get; set; } = "trim-preview-container";

    private DotNetObjectReference<SplitPane>? _dotNetRef;
    private bool _registered = false;

    private string LeftWidthPx => $"{Math.Max(0, LeftWidth)}px";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            try
            {
                // registerPanelResize(dotNetRef, handleId, debounceMs)
                await JSRuntime.InvokeVoidAsync("registerPanelResize", _dotNetRef, HandleId, 1500);
                _registered = true;
            }
            catch
            {
                _registered = false;
            }
        }
    }

    // JSから最終確定幅を受け取る
    [JSInvokable("CommitPanelWidth")]
    public async Task CommitPanelWidth(int width)
    {
        // clamp if necessary here or in caller
        LeftWidth = Math.Max(0, width);
        await LeftWidthChanged.InvokeAsync(LeftWidth);
        StateHasChanged();
    }

    [JSInvokable("OnPanelMouseMove")]
    public Task OnPanelMouseMove(double clientX)
    {
        // optional: can be forwarded or ignored
        return Task.CompletedTask;
    }

    [JSInvokable("OnPanelMouseUp")]
    public Task OnPanelMouseUp()
    {
        // optional: can be forwarded or ignored
        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_registered)
            {
                await JSRuntime.InvokeVoidAsync("unregisterPanelResize");
                _registered = false;
            }
        }
        catch { }
        _dotNetRef?.Dispose();
    }
}