<div class="min-h-[calc(100vh-56px)] md:min-h-screen flex items-center justify-center bg-neutral-100 relative">
    <div id="select-drop-area"
        class="absolute inset-0 flex flex-col items-center justify-center z-0 cursor-pointer transition"
        @onclick="OpenFileDialog">
        <div
            class="w-[97%] h-[90vh] md:h-[97vh] border-2 border-dashed border-blue-300 hover:border-solid rounded-xl flex flex-col items-center justify-center bg-white/60 hover:bg-blue-100/60 transition-colors duration-200">
            <FileOpenIcon Class="w-24 h-24 text-blue-500"></FileOpenIcon>
            <span class="text-blue-500 text-xl font-bold select-none mb-8 px-4">ここにファイルをドロップ または ペースト</span>
            <div class="text-center">
                <div class="mb-1">
                    <ActionButtonGroup T="string" Actions="selectFileActions" HideLabelOnNarrow="false" />
                </div>
                <div class="mb-6 text-neutral-500 text-sm mt-8 px-4">
                    サポートされているファイル形式：<br />
                    <span class="inline-block mt-1 font-mono bg-gray-100 px-2 py-1 rounded">
                        .pdf, .jpg, .jpeg, .png, .gif, .bmp, .webp, .svg
                    </span>
                </div>
                <div class="text-neutral-600">
                    <p class="text-sm mt-2">
                        1ファイルあたり最大 <span class="font-bold">100MB</span><br />
                        合計最大 <span class="font-bold">200MB</span> まで追加できます
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnOpenFileDialog { get; set; }
    [Parameter] public int progress { get; set; }

    private List<ActionButtonItem> selectFileActions => new()
{
new ActionButtonItem
{
Label = "ファイルを選択",
Title = "ファイルを選択",
OnClick = EventCallback.Factory.Create(this, OpenFileDialog),
ButtonClass = "bg-blue-600 hover:bg-blue-700 font-bold py-3 px-6 rounded-lg text-lg shadow",
StopPropagation = true,
TextColor = "text-white"
}
};

    private async Task OpenFileDialog()
    {
        if (OnOpenFileDialog.HasDelegate)
            await OnOpenFileDialog.InvokeAsync();
    }
}