@* ホバーした要素の周囲にツールチップを表示するラッパーコンポーネント *@
<span id="@_wrapperId"
      class="tooltip-wrapper"
      @onmouseenter="ShowTooltip"
      @onmouseleave="HideTooltip"
      @onfocus="ShowTooltip"
      @onblur="HideTooltip"
      tabindex="@(Focusable ? 0 : -1)">
    @ChildContent
</span>

@if (!string.IsNullOrWhiteSpace(Text) && _isVisible)
{
    <span id="@_tooltipId"
          class="tooltip-popup"
          role="tooltip"
          style="opacity:0; visibility:hidden;">
        @Text
        <span class="tooltip-arrow"></span>
    </span>
}

@code {
    [Parameter, EditorRequired] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Text { get; set; }
    [Parameter] public bool Focusable { get; set; } = false;

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    private string _wrapperId = "tooltip-wrapper-" + Guid.NewGuid().ToString("N");
    private string _tooltipId = "tooltip-popup-" + Guid.NewGuid().ToString("N");
    private bool _isVisible = false;

    private async Task ShowTooltip()
    {
        if (string.IsNullOrWhiteSpace(Text)) return;
        
        _isVisible = true;
        StateHasChanged();

        await Task.Delay(10);

        try
        {
            // JS 側で位置計算→表示まで行う
            await JSRuntime.InvokeVoidAsync("tooltipHelper.show", _wrapperId, _tooltipId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Tooltip ShowTooltip error: {ex.Message}");
        }
    }

    private async Task HideTooltip()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("tooltipHelper.hide", _tooltipId);
        }
        catch { }
        
        _isVisible = false;
        StateHasChanged();
    }
}