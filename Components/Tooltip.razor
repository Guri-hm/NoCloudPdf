@* ホバーした要素の周囲にツールチップを表示するラッパーコンポーネント *@
<span id="@_wrapperId"
      class="inline-block relative @(Focusable ? "focus:outline-2 focus:outline-blue-500 focus:outline-offset-2 focus:rounded focus-visible:bg-blue-50" : "")"
      @key="@_wrapperId"
      @onmouseenter="ShowTooltip"
      @onmouseleave="HideTooltip"
      @onfocus="ShowTooltip"
      @onblur="HideTooltip"
      tabindex="@(Focusable ? "0" : null)"
      role="@(Focusable ? "button" : null)"
      aria-label="@(Focusable ? "情報" : null)">
    @ChildContent
</span>

@if (!string.IsNullOrWhiteSpace(Text) && _isVisible)
{
    <span id="@_tooltipId"
          class="tooltip-popup fixed z-[9999] bg-gray-800 text-white text-sm leading-relaxed px-3 py-2 rounded-md border border-white/20 break-words max-w-[300px] shadow-[0_4px_16px_rgba(0,0,0,0.5),0_0_0_1px_rgba(255,255,255,0.1)] pointer-events-none transition-all duration-150"
          role="tooltip"
          @key="@_tooltipId"
          style="opacity:0; visibility:hidden;">
        @Text
        <span class="tooltip-arrow"></span>
    </span>
}

@code {
    [Parameter, EditorRequired] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Text { get; set; }
    [Parameter] public bool Focusable { get; set; } = true;

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    private string _wrapperId = "tooltip-wrapper-" + Guid.NewGuid().ToString("N");
    private string _tooltipId = "tooltip-popup-" + Guid.NewGuid().ToString("N");
    private bool _isVisible = false;
    private CancellationTokenSource? _showCts;

    private async Task ShowTooltip()
    {
        if (string.IsNullOrWhiteSpace(Text)) return;
        
        // 既存の表示処理をキャンセル
        _showCts?.Cancel();
        _showCts = new CancellationTokenSource();
        var currentCts = _showCts;
        
        _isVisible = true;
        StateHasChanged();

        try
        {
            // DOM のレンダリングを確実に待つ
            await Task.Delay(50, currentCts.Token);

            // キャンセルされていないか確認
            if (currentCts.IsCancellationRequested || currentCts != _showCts)
                return;

            await JSRuntime.InvokeVoidAsync("tooltipHelper.show", _wrapperId, _tooltipId);
        }
        catch (OperationCanceledException)
        {
            // キャンセルされた場合は何もしない
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Tooltip ShowTooltip error: {ex.Message}");
        }
    }

    private async Task HideTooltip()
    {
        // 表示処理をキャンセル
        _showCts?.Cancel();
        _showCts = null;

        try
        {
            await JSRuntime.InvokeVoidAsync("tooltipHelper.hide", _tooltipId);
        }
        catch { }
        
        _isVisible = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        _showCts?.Cancel();
        _showCts?.Dispose();
    }
}