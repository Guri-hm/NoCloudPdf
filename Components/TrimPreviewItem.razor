@using NoCloudPdf.Models
@inject IJSRuntime JSRuntime
@inject NoCloudPdf.Services.PdfDataService PdfDataService

<div class="relative mb-4 w-full flex justify-center">
    <div class="absolute top-2 left-1/2 -translate-x-1/2 z-20 px-2 py-1 rounded text-sm" data-no-scale>
        <div class="flex items-center gap-2 text-xs font-semibold px-2 py-0.5 rounded max-w-[80vw]"
             title="@Item.FullFileName"
             style="background:@(string.IsNullOrWhiteSpace(Item?.ColorHsl) ? "rgba(0,0,0,0.7)" : Item.ColorHsl)">
            <span class="truncate">@Item.DisplayName</span>
            <span class="flex-shrink-0">@(string.IsNullOrEmpty(Item?.PageInfo) ? "" : Item.PageInfo)</span>
        </div>
    </div>

    <div class="w-full">
        <canvas id="@CanvasId" @ref="canvasRef" class="block mx-auto"></canvas>
    </div>

    <div class="absolute inset-0 flex items-center justify-center bg-white/60 z-30"
         hidden="@(!isLoading)">
        <svg class="w-12 h-12 text-blue-600 animate-spin" viewBox="0 0 50 50" aria-hidden="true" role="img">
            <circle cx="25" cy="25" r="20" fill="none" stroke="currentColor" stroke-width="4" class="opacity-20"></circle>
            <path d="M45 25a20 20 0 0 1-20 20" fill="none" stroke="currentColor" stroke-width="4" stroke-linecap="round"></path>
        </svg>
    </div>
</div>

@code {
    [Parameter] public DisplayItem Item { get; set; } = default!;
    [Parameter] public int Index { get; set; }

    private ElementReference canvasRef;
    private bool isLoading = true;
    private string CanvasId => $"trim-preview-canvas-{Index}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await TryRenderAsync();
    }

    private async Task TryRenderAsync()
    {
        try
        {
            if (Item.RawData is not PageItem page) return;

            string? src = null;
            if (!string.IsNullOrEmpty(page.PageData) && !page.HasPageDataError)
            {
                var imageUrl = await PdfDataService.GetPreviewImageAsync(page.Id);
                src = imageUrl;
            }

            if (string.IsNullOrEmpty(src)) return;

            if (isLoading)
            {
                isLoading = false;
                await InvokeAsync(StateHasChanged);
            }

            // 重要: zoom は渡さない（EditPage 方式では canvas は実サイズ固定）
            await JSRuntime.InvokeVoidAsync("drawImageToCanvasForPreview", CanvasId, src, true, 1.0, "contain");
        }
        catch (OperationCanceledException) { }
        catch (Exception ex)
        {
            Console.WriteLine($"TrimPreviewItem render error idx={Index}: {ex.Message}");
        }
    }
}