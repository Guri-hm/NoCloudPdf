@using NoCloudPdf.Models
@inject IJSRuntime JSRuntime
@inject NoCloudPdf.Services.PdfDataService PdfDataService

<div class="preview-page" style="position:relative;">
    <canvas id="@CanvasId" @ref="canvasRef" class="w-full h-auto bg-white"></canvas>
    <div class="loading-overlay absolute inset-0 flex items-center justify-center pointer-events-none" hidden="@(!isLoading)">
        <div class="spinner">Loading...</div>
    </div>
</div>

@code {
    [Parameter] public DisplayItem Item { get; set; } = default!;
    [Parameter] public int Index { get; set; }

    private ElementReference canvasRef;
    private bool isLoading = true;
    private string CanvasId => $"trim-preview-canvas-{Index}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await TryRenderAsync();
    }

    private async Task TryRenderAsync()
    {

        try
        {
            if (Item.RawData is not PageItem page) return;

            string? src = null;
            if (!string.IsNullOrEmpty(page.PageData) && !page.HasPageDataError)
            {
                // キャッシュ済みならすぐ返る想定
                var imageUrl = await PdfDataService.GetPreviewImageAsync(page.Id);
                src = imageUrl;
            }

            // プレビュー未準備なら一度だけローディング表示を出す
            if (string.IsNullOrEmpty(src))
            {
                return;
            }

            if (isLoading)
            {
                isLoading = false;
                await InvokeAsync(StateHasChanged);
                return;
            }

            await JSRuntime.InvokeVoidAsync("drawImageToCanvas", CanvasId, src);

        }
        catch (OperationCanceledException) { }
        catch (Exception ex)
        {
            Console.WriteLine($"TrimPreviewItem render error idx={Index}: {ex.Message}");
        }
    }

}